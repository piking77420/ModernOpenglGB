# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CorePython
else:
    import _CorePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CorePython.delete_SwigPyIterator

    def value(self):
        return _CorePython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CorePython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CorePython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CorePython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CorePython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CorePython.SwigPyIterator_copy(self)

    def next(self):
        return _CorePython.SwigPyIterator_next(self)

    def __next__(self):
        return _CorePython.SwigPyIterator___next__(self)

    def previous(self):
        return _CorePython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CorePython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CorePython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CorePython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CorePython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CorePython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CorePython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CorePython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CorePython:
_CorePython.SwigPyIterator_swigregister(SwigPyIterator)
class Project(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    projectFolderDirectory = property(_CorePython.Project_projectFolderDirectory_get, _CorePython.Project_projectFolderDirectory_set)
    currentScene = property(_CorePython.Project_currentScene_get, _CorePython.Project_currentScene_set)
    resourcesManager = property(_CorePython.Project_resourcesManager_get, _CorePython.Project_resourcesManager_set)
    dockingSystem = property(_CorePython.Project_dockingSystem_get, _CorePython.Project_dockingSystem_set)
    projectName = property(_CorePython.Project_projectName_get, _CorePython.Project_projectName_set)
    mainCamera = property(_CorePython.Project_mainCamera_get, _CorePython.Project_mainCamera_set)
    coreInput = property(_CorePython.Project_coreInput_get, _CorePython.Project_coreInput_set)
    shaderNormal = property(_CorePython.Project_shaderNormal_get, _CorePython.Project_shaderNormal_set)
    shaderShadowMapping = property(_CorePython.Project_shaderShadowMapping_get, _CorePython.Project_shaderShadowMapping_set)
    skybox = property(_CorePython.Project_skybox_get, _CorePython.Project_skybox_set)

    def Update(self):
        return _CorePython.Project_Update(self)

    def __init__(self, *args):
        _CorePython.Project_swiginit(self, _CorePython.new_Project(*args))
    __swig_destroy__ = _CorePython.delete_Project

    def InitScene(self):
        return _CorePython.Project_InitScene(self)

# Register Project in _CorePython:
_CorePython.Project_swigregister(Project)
cvar = _CorePython.cvar

MAX_LOG_SIZE = _CorePython.MAX_LOG_SIZE
LOG_PATH = _CorePython.LOG_PATH
FORMAT = _CorePython.FORMAT
WHITE = _CorePython.WHITE
BLACK = _CorePython.BLACK
RED = _CorePython.RED
GREEN = _CorePython.GREEN
YELLOW = _CorePython.YELLOW
PURPLE = _CorePython.PURPLE

def GetTime():
    return _CorePython.GetTime()

def GetCurrentFile(currentPath):
    return _CorePython.GetCurrentFile(currentPath)

def OpengFileAndPrint(debugLogStream, color, time, message):
    return _CorePython.OpengFileAndPrint(debugLogStream, color, time, message)
STATELOG_NONE = _CorePython.STATELOG_NONE
STATELOG_GOOD = _CorePython.STATELOG_GOOD
STATELOG_WARNING = _CorePython.STATELOG_WARNING
STATELOG_CRITICALERROR = _CorePython.STATELOG_CRITICALERROR
class PythonScript(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pythonObject = property(_CorePython.PythonScript_pythonObject_get, _CorePython.PythonScript_pythonObject_set)

    def Init(self, scene):
        return _CorePython.PythonScript_Init(self, scene)

    def Awake(self, scene):
        return _CorePython.PythonScript_Awake(self, scene)

    def Start(self, scene):
        return _CorePython.PythonScript_Start(self, scene)

    def OnDrawGizmo(self, scene):
        return _CorePython.PythonScript_OnDrawGizmo(self, scene)

    def FixedUpdate(self, scene):
        return _CorePython.PythonScript_FixedUpdate(self, scene)

    def Update(self, scene):
        return _CorePython.PythonScript_Update(self, scene)

    def LateUpdate(self, scene):
        return _CorePython.PythonScript_LateUpdate(self, scene)

    def Render(self, shader, scene):
        return _CorePython.PythonScript_Render(self, shader, scene)

    def OnResizeData(self, ComponentTypeID, data):
        return _CorePython.PythonScript_OnResizeData(self, ComponentTypeID, data)

    def __init__(self):
        _CorePython.PythonScript_swiginit(self, _CorePython.new_PythonScript())
    __swig_destroy__ = _CorePython.delete_PythonScript

# Register PythonScript in _CorePython:
_CorePython.PythonScript_swigregister(PythonScript)
LogFileName = cvar.LogFileName
LogFileformat = cvar.LogFileformat
FileName = cvar.FileName

class Component(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CorePython.delete_Component

    def ImguiWindowComponent(self):
        return _CorePython.Component_ImguiWindowComponent(self)
    isEnable = property(_CorePython.Component_isEnable_get, _CorePython.Component_isEnable_set)
    entityID = property(_CorePython.Component_entityID_get, _CorePython.Component_entityID_set)

    @staticmethod
    def GetComponentTypeInfos():
        return _CorePython.Component_GetComponentTypeInfos()

    @staticmethod
    def SetComponentTypeInfos():
        return _CorePython.Component_SetComponentTypeInfos()

    def __init__(self):
        _CorePython.Component_swiginit(self, _CorePython.new_Component())

# Register Component in _CorePython:
_CorePython.Component_swigregister(Component)
ComponentNULL = _CorePython.ComponentNULL
EntityNULL = _CorePython.EntityNULL
class Entity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def OnInspector(entityID, scene):
        return _CorePython.Entity_OnInspector(entityID, scene)

    def OnSerialize(self, scene):
        return _CorePython.Entity_OnSerialize(self, scene)

    def OnDeSerialize(self, scene):
        return _CorePython.Entity_OnDeSerialize(self, scene)
    entityName = property(_CorePython.Entity_entityName_get, _CorePython.Entity_entityName_set)

    def SetID(self):
        return _CorePython.Entity_SetID(self)

    def GetID(self):
        return _CorePython.Entity_GetID(self)

    def __init__(self):
        _CorePython.Entity_swiginit(self, _CorePython.new_Entity())
    __swig_destroy__ = _CorePython.delete_Entity
    scene = property(_CorePython.Entity_scene_get, _CorePython.Entity_scene_set)
    entityComponents = property(_CorePython.Entity_entityComponents_get, _CorePython.Entity_entityComponents_set)
    ID = property(_CorePython.Entity_ID_get, _CorePython.Entity_ID_set)

# Register Entity in _CorePython:
_CorePython.Entity_swigregister(Entity)
class IEcsSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Init(self, scene):
        return _CorePython.IEcsSystem_Init(self, scene)

    def Awake(self, scene):
        return _CorePython.IEcsSystem_Awake(self, scene)

    def Start(self, scene):
        return _CorePython.IEcsSystem_Start(self, scene)

    def OnDrawGizmo(self, scene):
        return _CorePython.IEcsSystem_OnDrawGizmo(self, scene)

    def FixedUpdate(self, scene):
        return _CorePython.IEcsSystem_FixedUpdate(self, scene)

    def Update(self, scene):
        return _CorePython.IEcsSystem_Update(self, scene)

    def LateUpdate(self, scene):
        return _CorePython.IEcsSystem_LateUpdate(self, scene)

    def Render(self, shader, scene):
        return _CorePython.IEcsSystem_Render(self, shader, scene)

    def OnResizeData(self, ComponentTypeID, data):
        return _CorePython.IEcsSystem_OnResizeData(self, ComponentTypeID, data)
    __swig_destroy__ = _CorePython.delete_IEcsSystem

# Register IEcsSystem in _CorePython:
_CorePython.IEcsSystem_swigregister(IEcsSystem)
class Register(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CorePython.Register_swiginit(self, _CorePython.new_Register())
    __swig_destroy__ = _CorePython.delete_Register
    entities = property(_CorePython.Register_entities_get, _CorePython.Register_entities_set)
    ComponentsData = property(_CorePython.Register_ComponentsData_get, _CorePython.Register_ComponentsData_set)
    systems = property(_CorePython.Register_systems_get, _CorePython.Register_systems_set)
    OnReSizeDataVector = property(_CorePython.Register_OnReSizeDataVector_get, _CorePython.Register_OnReSizeDataVector_set)

# Register Register in _CorePython:
_CorePython.Register_swigregister(Register)
class BoxCollider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    collider = property(_CorePython.BoxCollider_collider_get, _CorePython.BoxCollider_collider_set)
    Size = property(_CorePython.BoxCollider_Size_get, _CorePython.BoxCollider_Size_set)

    def ImguiWindowComponent(self):
        return _CorePython.BoxCollider_ImguiWindowComponent(self)

    def __init__(self):
        _CorePython.BoxCollider_swiginit(self, _CorePython.new_BoxCollider())
    __swig_destroy__ = _CorePython.delete_BoxCollider

# Register BoxCollider in _CorePython:
_CorePython.BoxCollider_swigregister(BoxCollider)
CollisionType_Sphere = _CorePython.CollisionType_Sphere
CollisionType_Box = _CorePython.CollisionType_Box
class PhyscicalMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    friction = property(_CorePython.PhyscicalMaterial_friction_get, _CorePython.PhyscicalMaterial_friction_set)
    Boundciness = property(_CorePython.PhyscicalMaterial_Boundciness_get, _CorePython.PhyscicalMaterial_Boundciness_set)

    def __init__(self):
        _CorePython.PhyscicalMaterial_swiginit(self, _CorePython.new_PhyscicalMaterial())
    __swig_destroy__ = _CorePython.delete_PhyscicalMaterial

# Register PhyscicalMaterial in _CorePython:
_CorePython.PhyscicalMaterial_swigregister(PhyscicalMaterial)
class CollisionPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    depht = property(_CorePython.CollisionPoint_depht_get, _CorePython.CollisionPoint_depht_set)
    collisionPoint = property(_CorePython.CollisionPoint_collisionPoint_get, _CorePython.CollisionPoint_collisionPoint_set)
    Normal = property(_CorePython.CollisionPoint_Normal_get, _CorePython.CollisionPoint_Normal_set)
    entityIDBeenCollidWith = property(_CorePython.CollisionPoint_entityIDBeenCollidWith_get, _CorePython.CollisionPoint_entityIDBeenCollidWith_set)

    def __init__(self, *args):
        _CorePython.CollisionPoint_swiginit(self, _CorePython.new_CollisionPoint(*args))
    __swig_destroy__ = _CorePython.delete_CollisionPoint

# Register CollisionPoint in _CorePython:
_CorePython.CollisionPoint_swigregister(CollisionPoint)
class Collider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    collisionType = property(_CorePython.Collider_collisionType_get, _CorePython.Collider_collisionType_set)
    IsDrawing = property(_CorePython.Collider_IsDrawing_get, _CorePython.Collider_IsDrawing_set)
    IsTrigger = property(_CorePython.Collider_IsTrigger_get, _CorePython.Collider_IsTrigger_set)
    CollisionPoint = property(_CorePython.Collider_CollisionPoint_get, _CorePython.Collider_CollisionPoint_set)
    physcicalMaterial = property(_CorePython.Collider_physcicalMaterial_get, _CorePython.Collider_physcicalMaterial_set)

    def __init__(self):
        _CorePython.Collider_swiginit(self, _CorePython.new_Collider())
    __swig_destroy__ = _CorePython.delete_Collider

# Register Collider in _CorePython:
_CorePython.Collider_swigregister(Collider)
class ColliderSystem(IEcsSystem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Init(self, scene):
        return _CorePython.ColliderSystem_Init(self, scene)

    def Awake(self, scene):
        return _CorePython.ColliderSystem_Awake(self, scene)

    def Start(self, scene):
        return _CorePython.ColliderSystem_Start(self, scene)

    def OnDrawGizmo(self, scene):
        return _CorePython.ColliderSystem_OnDrawGizmo(self, scene)

    def FixedUpdate(self, scene):
        return _CorePython.ColliderSystem_FixedUpdate(self, scene)

    def Update(self, scene):
        return _CorePython.ColliderSystem_Update(self, scene)

    def LateUpdate(self, scene):
        return _CorePython.ColliderSystem_LateUpdate(self, scene)

    def Render(self, shader, scene):
        return _CorePython.ColliderSystem_Render(self, shader, scene)

    def OnResizeData(self, ComponentTypeID, data):
        return _CorePython.ColliderSystem_OnResizeData(self, ComponentTypeID, data)

    def __init__(self):
        _CorePython.ColliderSystem_swiginit(self, _CorePython.new_ColliderSystem())
    __swig_destroy__ = _CorePython.delete_ColliderSystem

# Register ColliderSystem in _CorePython:
_CorePython.ColliderSystem_swigregister(ColliderSystem)
class SphereCollider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    collider = property(_CorePython.SphereCollider_collider_get, _CorePython.SphereCollider_collider_set)
    radius = property(_CorePython.SphereCollider_radius_get, _CorePython.SphereCollider_radius_set)

    def ImguiWindowComponent(self):
        return _CorePython.SphereCollider_ImguiWindowComponent(self)

    def __init__(self):
        _CorePython.SphereCollider_swiginit(self, _CorePython.new_SphereCollider())
    __swig_destroy__ = _CorePython.delete_SphereCollider

# Register SphereCollider in _CorePython:
_CorePython.SphereCollider_swigregister(SphereCollider)
class GraphScene(IEcsSystem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Init(self, scene):
        return _CorePython.GraphScene_Init(self, scene)

    def Awake(self, scene):
        return _CorePython.GraphScene_Awake(self, scene)

    def Start(self, scene):
        return _CorePython.GraphScene_Start(self, scene)

    def OnDrawGizmo(self, scene):
        return _CorePython.GraphScene_OnDrawGizmo(self, scene)

    def FixedUpdate(self, scene):
        return _CorePython.GraphScene_FixedUpdate(self, scene)

    def Update(self, scene):
        return _CorePython.GraphScene_Update(self, scene)

    def LateUpdate(self, scene):
        return _CorePython.GraphScene_LateUpdate(self, scene)

    def Render(self, shader, scene):
        return _CorePython.GraphScene_Render(self, shader, scene)

    def OnResizeData(self, ComponentTypeID, data):
        return _CorePython.GraphScene_OnResizeData(self, ComponentTypeID, data)

    @staticmethod
    def BeChildOf(Parent, Child):
        return _CorePython.GraphScene_BeChildOf(Parent, Child)

    @staticmethod
    def NoParent(transform):
        return _CorePython.GraphScene_NoParent(transform)

    @staticmethod
    def UnChild(Parent, Child):
        return _CorePython.GraphScene_UnChild(Parent, Child)

    @staticmethod
    def GetParentLink(transform, currentValue):
        return _CorePython.GraphScene_GetParentLink(transform, currentValue)

    @staticmethod
    def CountParentLink(transform):
        return _CorePython.GraphScene_CountParentLink(transform)

    def __init__(self):
        _CorePython.GraphScene_swiginit(self, _CorePython.new_GraphScene())
    __swig_destroy__ = _CorePython.delete_GraphScene

# Register GraphScene in _CorePython:
_CorePython.GraphScene_swigregister(GraphScene)
class PhysicsSystem(IEcsSystem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Init(self, scene):
        return _CorePython.PhysicsSystem_Init(self, scene)

    def Awake(self, scene):
        return _CorePython.PhysicsSystem_Awake(self, scene)

    def Start(self, scene):
        return _CorePython.PhysicsSystem_Start(self, scene)

    def OnDrawGizmo(self, scene):
        return _CorePython.PhysicsSystem_OnDrawGizmo(self, scene)

    def FixedUpdate(self, scene):
        return _CorePython.PhysicsSystem_FixedUpdate(self, scene)

    def Update(self, scene):
        return _CorePython.PhysicsSystem_Update(self, scene)

    def LateUpdate(self, scene):
        return _CorePython.PhysicsSystem_LateUpdate(self, scene)

    def Render(self, shader, scene):
        return _CorePython.PhysicsSystem_Render(self, shader, scene)

    def OnResizeData(self, ComponentTypeID, data):
        return _CorePython.PhysicsSystem_OnResizeData(self, ComponentTypeID, data)
    gravity = property(_CorePython.PhysicsSystem_gravity_get, _CorePython.PhysicsSystem_gravity_set)

    def AddForce(self, rb, forces):
        return _CorePython.PhysicsSystem_AddForce(self, rb, forces)

    def __init__(self):
        _CorePython.PhysicsSystem_swiginit(self, _CorePython.new_PhysicsSystem())
    __swig_destroy__ = _CorePython.delete_PhysicsSystem

# Register PhysicsSystem in _CorePython:
_CorePython.PhysicsSystem_swigregister(PhysicsSystem)
class Rigidbody(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IsKinematic = property(_CorePython.Rigidbody_IsKinematic_get, _CorePython.Rigidbody_IsKinematic_set)
    IsGravityApplie = property(_CorePython.Rigidbody_IsGravityApplie_get, _CorePython.Rigidbody_IsGravityApplie_set)
    mass = property(_CorePython.Rigidbody_mass_get, _CorePython.Rigidbody_mass_set)
    drag = property(_CorePython.Rigidbody_drag_get, _CorePython.Rigidbody_drag_set)
    Velocity = property(_CorePython.Rigidbody_Velocity_get, _CorePython.Rigidbody_Velocity_set)
    Force = property(_CorePython.Rigidbody_Force_get, _CorePython.Rigidbody_Force_set)

    def ImguiWindowComponent(self):
        return _CorePython.Rigidbody_ImguiWindowComponent(self)

    def __init__(self):
        _CorePython.Rigidbody_swiginit(self, _CorePython.new_Rigidbody())
    __swig_destroy__ = _CorePython.delete_Rigidbody

# Register Rigidbody in _CorePython:
_CorePython.Rigidbody_swigregister(Rigidbody)
class Transform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_CorePython.Transform_pos_get, _CorePython.Transform_pos_set)
    scaling = property(_CorePython.Transform_scaling_get, _CorePython.Transform_scaling_set)
    rotationValue = property(_CorePython.Transform_rotationValue_get, _CorePython.Transform_rotationValue_set)
    local = property(_CorePython.Transform_local_get, _CorePython.Transform_local_set)
    world = property(_CorePython.Transform_world_get, _CorePython.Transform_world_set)

    def SetRotation(self, *args):
        return _CorePython.Transform_SetRotation(self, *args)

    def GetRotation(self):
        return _CorePython.Transform_GetRotation(self)
    parentID = property(_CorePython.Transform_parentID_get, _CorePython.Transform_parentID_set)
    parent = property(_CorePython.Transform_parent_get, _CorePython.Transform_parent_set)
    childs = property(_CorePython.Transform_childs_get, _CorePython.Transform_childs_set)

    def ImguiWindowComponent(self):
        return _CorePython.Transform_ImguiWindowComponent(self)

    def __init__(self):
        _CorePython.Transform_swiginit(self, _CorePython.new_Transform())
    __swig_destroy__ = _CorePython.delete_Transform

# Register Transform in _CorePython:
_CorePython.Transform_swigregister(Transform)

