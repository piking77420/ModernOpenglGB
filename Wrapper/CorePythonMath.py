# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CorePythonMath
else:
    import _CorePythonMath

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Vector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_CorePythonMath.Vector2_x_get, _CorePythonMath.Vector2_x_set)
    y = property(_CorePythonMath.Vector2_y_get, _CorePythonMath.Vector2_y_set)

    @staticmethod
    def Size():
        return _CorePythonMath.Vector2_Size()

    def Norm(self):
        return _CorePythonMath.Vector2_Norm(self)

    def Normalize(self):
        return _CorePythonMath.Vector2_Normalize(self)

    @staticmethod
    def DotProduct(vec1, Row1):
        return _CorePythonMath.Vector2_DotProduct(vec1, Row1)

    def Normal(self):
        return _CorePythonMath.Vector2_Normal(self)

    def Angle(self, *args):
        return _CorePythonMath.Vector2_Angle(self, *args)

    @staticmethod
    def Determinant(vec1, vec2):
        return _CorePythonMath.Vector2_Determinant(vec1, vec2)

    @staticmethod
    def CrossProduct(vec1, vec2):
        return _CorePythonMath.Vector2_CrossProduct(vec1, vec2)

    @staticmethod
    def DistanceSquare(a, b):
        return _CorePythonMath.Vector2_DistanceSquare(a, b)

    @staticmethod
    def Distance(a, b):
        return _CorePythonMath.Vector2_Distance(a, b)

    def SetPtr(self):
        return _CorePythonMath.Vector2_SetPtr(self)

    def GetPtr(self):
        return _CorePythonMath.Vector2_GetPtr(self)

    @staticmethod
    def Zero():
        return _CorePythonMath.Vector2_Zero()

    @staticmethod
    def One():
        return _CorePythonMath.Vector2_One()

    @staticmethod
    def Right():
        return _CorePythonMath.Vector2_Right()

    @staticmethod
    def Left():
        return _CorePythonMath.Vector2_Left()

    @staticmethod
    def Up():
        return _CorePythonMath.Vector2_Up()

    @staticmethod
    def Down():
        return _CorePythonMath.Vector2_Down()

    def __init__(self, *args):
        _CorePythonMath.Vector2_swiginit(self, _CorePythonMath.new_Vector2(*args))

    def __add__(self, *args):
        return _CorePythonMath.Vector2___add__(self, *args)

    def __mul__(self, *args):
        return _CorePythonMath.Vector2___mul__(self, *args)

    def __truediv__(self, *args):
        return _CorePythonMath.Vector2___truediv__(self, *args)
    __div__ = __truediv__



    def __sub__(self, *args):
        return _CorePythonMath.Vector2___sub__(self, *args)

    def __iadd__(self, Row1):
        return _CorePythonMath.Vector2___iadd__(self, Row1)

    def __isub__(self, Row1):
        return _CorePythonMath.Vector2___isub__(self, Row1)

    def __imul__(self, Row1):
        return _CorePythonMath.Vector2___imul__(self, Row1)

    def __itruediv__(self, *args):
        return _CorePythonMath.Vector2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __ne__(self, vec2):
        return _CorePythonMath.Vector2___ne__(self, vec2)

    def __eq__(self, vec2):
        return _CorePythonMath.Vector2___eq__(self, vec2)

    def __le__(self, vec2):
        return _CorePythonMath.Vector2___le__(self, vec2)

    def __ge__(self, vec2):
        return _CorePythonMath.Vector2___ge__(self, vec2)
    __swig_destroy__ = _CorePythonMath.delete_Vector2

# Register Vector2 in _CorePythonMath:
_CorePythonMath.Vector2_swigregister(Vector2)
class Vector3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_CorePythonMath.Vector3_x_get, _CorePythonMath.Vector3_x_set)
    y = property(_CorePythonMath.Vector3_y_get, _CorePythonMath.Vector3_y_set)
    z = property(_CorePythonMath.Vector3_z_get, _CorePythonMath.Vector3_z_set)

    @staticmethod
    def Size():
        return _CorePythonMath.Vector3_Size()

    def Norm(self):
        return _CorePythonMath.Vector3_Norm(self)

    def Normalize(self):
        return _CorePythonMath.Vector3_Normalize(self)

    def FNorm(self):
        return _CorePythonMath.Vector3_FNorm(self)

    def FNormalize(self):
        return _CorePythonMath.Vector3_FNormalize(self)

    @staticmethod
    def Reflect(Vector, Normal):
        return _CorePythonMath.Vector3_Reflect(Vector, Normal)

    @staticmethod
    def DotProduct(vec1, vec2):
        return _CorePythonMath.Vector3_DotProduct(vec1, vec2)

    @staticmethod
    def CrossProduct(vec1, vec2):
        return _CorePythonMath.Vector3_CrossProduct(vec1, vec2)

    @staticmethod
    def Angle(vec1, Row1):
        return _CorePythonMath.Vector3_Angle(vec1, Row1)

    @staticmethod
    def DistanceSquare(a, b):
        return _CorePythonMath.Vector3_DistanceSquare(a, b)

    @staticmethod
    def Distance(a, b):
        return _CorePythonMath.Vector3_Distance(a, b)

    @staticmethod
    def scale(v, desiredLength):
        return _CorePythonMath.Vector3_scale(v, desiredLength)

    def SetPtr(self):
        return _CorePythonMath.Vector3_SetPtr(self)

    def GetPtr(self):
        return _CorePythonMath.Vector3_GetPtr(self)

    def MakePositivEuleur(self):
        return _CorePythonMath.Vector3_MakePositivEuleur(self)

    @staticmethod
    def Zero():
        return _CorePythonMath.Vector3_Zero()

    @staticmethod
    def One():
        return _CorePythonMath.Vector3_One()

    @staticmethod
    def Right():
        return _CorePythonMath.Vector3_Right()

    @staticmethod
    def Left():
        return _CorePythonMath.Vector3_Left()

    @staticmethod
    def Up():
        return _CorePythonMath.Vector3_Up()

    @staticmethod
    def Down():
        return _CorePythonMath.Vector3_Down()

    @staticmethod
    def Forward():
        return _CorePythonMath.Vector3_Forward()

    @staticmethod
    def BackForward():
        return _CorePythonMath.Vector3_BackForward()

    def __init__(self, *args):
        _CorePythonMath.Vector3_swiginit(self, _CorePythonMath.new_Vector3(*args))

    def __neg__(self):
        return _CorePythonMath.Vector3___neg__(self)

    def __mul__(self, *args):
        return _CorePythonMath.Vector3___mul__(self, *args)

    def __truediv__(self, *args):
        return _CorePythonMath.Vector3___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, Row1):
        return _CorePythonMath.Vector3___iadd__(self, Row1)

    def __isub__(self, Row1):
        return _CorePythonMath.Vector3___isub__(self, Row1)

    def __itruediv__(self, *args):
        return _CorePythonMath.Vector3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, *args):
        return _CorePythonMath.Vector3___add__(self, *args)

    def __sub__(self, *args):
        return _CorePythonMath.Vector3___sub__(self, *args)

    def __imul__(self, *args):
        return _CorePythonMath.Vector3___imul__(self, *args)
    __swig_destroy__ = _CorePythonMath.delete_Vector3

# Register Vector3 in _CorePythonMath:
_CorePythonMath.Vector3_swigregister(Vector3)

