# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CorePython
else:
    import _CorePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def GetComponent_Transform(entity):
    return _CorePython.GetComponent_Transform(entity)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CorePython.delete_SwigPyIterator

    def value(self):
        return _CorePython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CorePython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CorePython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CorePython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CorePython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CorePython.SwigPyIterator_copy(self)

    def next(self):
        return _CorePython.SwigPyIterator_next(self)

    def __next__(self):
        return _CorePython.SwigPyIterator___next__(self)

    def previous(self):
        return _CorePython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CorePython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CorePython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CorePython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CorePython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CorePython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CorePython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CorePython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CorePython:
_CorePython.SwigPyIterator_swigregister(SwigPyIterator)
class gladGLversionStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    major = property(_CorePython.gladGLversionStruct_major_get, _CorePython.gladGLversionStruct_major_set)
    minor = property(_CorePython.gladGLversionStruct_minor_get, _CorePython.gladGLversionStruct_minor_set)

    def __init__(self):
        _CorePython.gladGLversionStruct_swiginit(self, _CorePython.new_gladGLversionStruct())
    __swig_destroy__ = _CorePython.delete_gladGLversionStruct

# Register gladGLversionStruct in _CorePython:
_CorePython.gladGLversionStruct_swigregister(gladGLversionStruct)

def gladLoadGL():
    return _CorePython.gladLoadGL()

def gladLoadGLLoader(arg1):
    return _CorePython.gladLoadGLLoader(arg1)
GL_DEPTH_BUFFER_BIT = _CorePython.GL_DEPTH_BUFFER_BIT
GL_STENCIL_BUFFER_BIT = _CorePython.GL_STENCIL_BUFFER_BIT
GL_COLOR_BUFFER_BIT = _CorePython.GL_COLOR_BUFFER_BIT
GL_FALSE = _CorePython.GL_FALSE
GL_TRUE = _CorePython.GL_TRUE
GL_POINTS = _CorePython.GL_POINTS
GL_LINES = _CorePython.GL_LINES
GL_LINE_LOOP = _CorePython.GL_LINE_LOOP
GL_LINE_STRIP = _CorePython.GL_LINE_STRIP
GL_TRIANGLES = _CorePython.GL_TRIANGLES
GL_TRIANGLE_STRIP = _CorePython.GL_TRIANGLE_STRIP
GL_TRIANGLE_FAN = _CorePython.GL_TRIANGLE_FAN
GL_QUADS = _CorePython.GL_QUADS
GL_NEVER = _CorePython.GL_NEVER
GL_LESS = _CorePython.GL_LESS
GL_EQUAL = _CorePython.GL_EQUAL
GL_LEQUAL = _CorePython.GL_LEQUAL
GL_GREATER = _CorePython.GL_GREATER
GL_NOTEQUAL = _CorePython.GL_NOTEQUAL
GL_GEQUAL = _CorePython.GL_GEQUAL
GL_ALWAYS = _CorePython.GL_ALWAYS
GL_ZERO = _CorePython.GL_ZERO
GL_ONE = _CorePython.GL_ONE
GL_SRC_COLOR = _CorePython.GL_SRC_COLOR
GL_ONE_MINUS_SRC_COLOR = _CorePython.GL_ONE_MINUS_SRC_COLOR
GL_SRC_ALPHA = _CorePython.GL_SRC_ALPHA
GL_ONE_MINUS_SRC_ALPHA = _CorePython.GL_ONE_MINUS_SRC_ALPHA
GL_DST_ALPHA = _CorePython.GL_DST_ALPHA
GL_ONE_MINUS_DST_ALPHA = _CorePython.GL_ONE_MINUS_DST_ALPHA
GL_DST_COLOR = _CorePython.GL_DST_COLOR
GL_ONE_MINUS_DST_COLOR = _CorePython.GL_ONE_MINUS_DST_COLOR
GL_SRC_ALPHA_SATURATE = _CorePython.GL_SRC_ALPHA_SATURATE
GL_NONE = _CorePython.GL_NONE
GL_FRONT_LEFT = _CorePython.GL_FRONT_LEFT
GL_FRONT_RIGHT = _CorePython.GL_FRONT_RIGHT
GL_BACK_LEFT = _CorePython.GL_BACK_LEFT
GL_BACK_RIGHT = _CorePython.GL_BACK_RIGHT
GL_FRONT = _CorePython.GL_FRONT
GL_BACK = _CorePython.GL_BACK
GL_LEFT = _CorePython.GL_LEFT
GL_RIGHT = _CorePython.GL_RIGHT
GL_FRONT_AND_BACK = _CorePython.GL_FRONT_AND_BACK
GL_NO_ERROR = _CorePython.GL_NO_ERROR
GL_INVALID_ENUM = _CorePython.GL_INVALID_ENUM
GL_INVALID_VALUE = _CorePython.GL_INVALID_VALUE
GL_INVALID_OPERATION = _CorePython.GL_INVALID_OPERATION
GL_OUT_OF_MEMORY = _CorePython.GL_OUT_OF_MEMORY
GL_CW = _CorePython.GL_CW
GL_CCW = _CorePython.GL_CCW
GL_POINT_SIZE = _CorePython.GL_POINT_SIZE
GL_POINT_SIZE_RANGE = _CorePython.GL_POINT_SIZE_RANGE
GL_POINT_SIZE_GRANULARITY = _CorePython.GL_POINT_SIZE_GRANULARITY
GL_LINE_SMOOTH = _CorePython.GL_LINE_SMOOTH
GL_LINE_WIDTH = _CorePython.GL_LINE_WIDTH
GL_LINE_WIDTH_RANGE = _CorePython.GL_LINE_WIDTH_RANGE
GL_LINE_WIDTH_GRANULARITY = _CorePython.GL_LINE_WIDTH_GRANULARITY
GL_POLYGON_MODE = _CorePython.GL_POLYGON_MODE
GL_POLYGON_SMOOTH = _CorePython.GL_POLYGON_SMOOTH
GL_CULL_FACE = _CorePython.GL_CULL_FACE
GL_CULL_FACE_MODE = _CorePython.GL_CULL_FACE_MODE
GL_FRONT_FACE = _CorePython.GL_FRONT_FACE
GL_DEPTH_RANGE = _CorePython.GL_DEPTH_RANGE
GL_DEPTH_TEST = _CorePython.GL_DEPTH_TEST
GL_DEPTH_WRITEMASK = _CorePython.GL_DEPTH_WRITEMASK
GL_DEPTH_CLEAR_VALUE = _CorePython.GL_DEPTH_CLEAR_VALUE
GL_DEPTH_FUNC = _CorePython.GL_DEPTH_FUNC
GL_STENCIL_TEST = _CorePython.GL_STENCIL_TEST
GL_STENCIL_CLEAR_VALUE = _CorePython.GL_STENCIL_CLEAR_VALUE
GL_STENCIL_FUNC = _CorePython.GL_STENCIL_FUNC
GL_STENCIL_VALUE_MASK = _CorePython.GL_STENCIL_VALUE_MASK
GL_STENCIL_FAIL = _CorePython.GL_STENCIL_FAIL
GL_STENCIL_PASS_DEPTH_FAIL = _CorePython.GL_STENCIL_PASS_DEPTH_FAIL
GL_STENCIL_PASS_DEPTH_PASS = _CorePython.GL_STENCIL_PASS_DEPTH_PASS
GL_STENCIL_REF = _CorePython.GL_STENCIL_REF
GL_STENCIL_WRITEMASK = _CorePython.GL_STENCIL_WRITEMASK
GL_VIEWPORT = _CorePython.GL_VIEWPORT
GL_DITHER = _CorePython.GL_DITHER
GL_BLEND_DST = _CorePython.GL_BLEND_DST
GL_BLEND_SRC = _CorePython.GL_BLEND_SRC
GL_BLEND = _CorePython.GL_BLEND
GL_LOGIC_OP_MODE = _CorePython.GL_LOGIC_OP_MODE
GL_DRAW_BUFFER = _CorePython.GL_DRAW_BUFFER
GL_READ_BUFFER = _CorePython.GL_READ_BUFFER
GL_SCISSOR_BOX = _CorePython.GL_SCISSOR_BOX
GL_SCISSOR_TEST = _CorePython.GL_SCISSOR_TEST
GL_COLOR_CLEAR_VALUE = _CorePython.GL_COLOR_CLEAR_VALUE
GL_COLOR_WRITEMASK = _CorePython.GL_COLOR_WRITEMASK
GL_DOUBLEBUFFER = _CorePython.GL_DOUBLEBUFFER
GL_STEREO = _CorePython.GL_STEREO
GL_LINE_SMOOTH_HINT = _CorePython.GL_LINE_SMOOTH_HINT
GL_POLYGON_SMOOTH_HINT = _CorePython.GL_POLYGON_SMOOTH_HINT
GL_UNPACK_SWAP_BYTES = _CorePython.GL_UNPACK_SWAP_BYTES
GL_UNPACK_LSB_FIRST = _CorePython.GL_UNPACK_LSB_FIRST
GL_UNPACK_ROW_LENGTH = _CorePython.GL_UNPACK_ROW_LENGTH
GL_UNPACK_SKIP_ROWS = _CorePython.GL_UNPACK_SKIP_ROWS
GL_UNPACK_SKIP_PIXELS = _CorePython.GL_UNPACK_SKIP_PIXELS
GL_UNPACK_ALIGNMENT = _CorePython.GL_UNPACK_ALIGNMENT
GL_PACK_SWAP_BYTES = _CorePython.GL_PACK_SWAP_BYTES
GL_PACK_LSB_FIRST = _CorePython.GL_PACK_LSB_FIRST
GL_PACK_ROW_LENGTH = _CorePython.GL_PACK_ROW_LENGTH
GL_PACK_SKIP_ROWS = _CorePython.GL_PACK_SKIP_ROWS
GL_PACK_SKIP_PIXELS = _CorePython.GL_PACK_SKIP_PIXELS
GL_PACK_ALIGNMENT = _CorePython.GL_PACK_ALIGNMENT
GL_MAX_TEXTURE_SIZE = _CorePython.GL_MAX_TEXTURE_SIZE
GL_MAX_VIEWPORT_DIMS = _CorePython.GL_MAX_VIEWPORT_DIMS
GL_SUBPIXEL_BITS = _CorePython.GL_SUBPIXEL_BITS
GL_TEXTURE_1D = _CorePython.GL_TEXTURE_1D
GL_TEXTURE_2D = _CorePython.GL_TEXTURE_2D
GL_TEXTURE_WIDTH = _CorePython.GL_TEXTURE_WIDTH
GL_TEXTURE_HEIGHT = _CorePython.GL_TEXTURE_HEIGHT
GL_TEXTURE_BORDER_COLOR = _CorePython.GL_TEXTURE_BORDER_COLOR
GL_DONT_CARE = _CorePython.GL_DONT_CARE
GL_FASTEST = _CorePython.GL_FASTEST
GL_NICEST = _CorePython.GL_NICEST
GL_BYTE = _CorePython.GL_BYTE
GL_UNSIGNED_BYTE = _CorePython.GL_UNSIGNED_BYTE
GL_SHORT = _CorePython.GL_SHORT
GL_UNSIGNED_SHORT = _CorePython.GL_UNSIGNED_SHORT
GL_INT = _CorePython.GL_INT
GL_UNSIGNED_INT = _CorePython.GL_UNSIGNED_INT
GL_FLOAT = _CorePython.GL_FLOAT
GL_STACK_OVERFLOW = _CorePython.GL_STACK_OVERFLOW
GL_STACK_UNDERFLOW = _CorePython.GL_STACK_UNDERFLOW
GL_CLEAR = _CorePython.GL_CLEAR
GL_AND = _CorePython.GL_AND
GL_AND_REVERSE = _CorePython.GL_AND_REVERSE
GL_COPY = _CorePython.GL_COPY
GL_AND_INVERTED = _CorePython.GL_AND_INVERTED
GL_NOOP = _CorePython.GL_NOOP
GL_XOR = _CorePython.GL_XOR
GL_OR = _CorePython.GL_OR
GL_NOR = _CorePython.GL_NOR
GL_EQUIV = _CorePython.GL_EQUIV
GL_INVERT = _CorePython.GL_INVERT
GL_OR_REVERSE = _CorePython.GL_OR_REVERSE
GL_COPY_INVERTED = _CorePython.GL_COPY_INVERTED
GL_OR_INVERTED = _CorePython.GL_OR_INVERTED
GL_NAND = _CorePython.GL_NAND
GL_SET = _CorePython.GL_SET
GL_TEXTURE = _CorePython.GL_TEXTURE
GL_COLOR = _CorePython.GL_COLOR
GL_DEPTH = _CorePython.GL_DEPTH
GL_STENCIL = _CorePython.GL_STENCIL
GL_STENCIL_INDEX = _CorePython.GL_STENCIL_INDEX
GL_DEPTH_COMPONENT = _CorePython.GL_DEPTH_COMPONENT
GL_RED = _CorePython.GL_RED
GL_GREEN = _CorePython.GL_GREEN
GL_BLUE = _CorePython.GL_BLUE
GL_ALPHA = _CorePython.GL_ALPHA
GL_RGB = _CorePython.GL_RGB
GL_RGBA = _CorePython.GL_RGBA
GL_POINT = _CorePython.GL_POINT
GL_LINE = _CorePython.GL_LINE
GL_FILL = _CorePython.GL_FILL
GL_KEEP = _CorePython.GL_KEEP
GL_REPLACE = _CorePython.GL_REPLACE
GL_INCR = _CorePython.GL_INCR
GL_DECR = _CorePython.GL_DECR
GL_VENDOR = _CorePython.GL_VENDOR
GL_RENDERER = _CorePython.GL_RENDERER
GL_VERSION = _CorePython.GL_VERSION
GL_EXTENSIONS = _CorePython.GL_EXTENSIONS
GL_NEAREST = _CorePython.GL_NEAREST
GL_LINEAR = _CorePython.GL_LINEAR
GL_NEAREST_MIPMAP_NEAREST = _CorePython.GL_NEAREST_MIPMAP_NEAREST
GL_LINEAR_MIPMAP_NEAREST = _CorePython.GL_LINEAR_MIPMAP_NEAREST
GL_NEAREST_MIPMAP_LINEAR = _CorePython.GL_NEAREST_MIPMAP_LINEAR
GL_LINEAR_MIPMAP_LINEAR = _CorePython.GL_LINEAR_MIPMAP_LINEAR
GL_TEXTURE_MAG_FILTER = _CorePython.GL_TEXTURE_MAG_FILTER
GL_TEXTURE_MIN_FILTER = _CorePython.GL_TEXTURE_MIN_FILTER
GL_TEXTURE_WRAP_S = _CorePython.GL_TEXTURE_WRAP_S
GL_TEXTURE_WRAP_T = _CorePython.GL_TEXTURE_WRAP_T
GL_REPEAT = _CorePython.GL_REPEAT
GL_CURRENT_BIT = _CorePython.GL_CURRENT_BIT
GL_POINT_BIT = _CorePython.GL_POINT_BIT
GL_LINE_BIT = _CorePython.GL_LINE_BIT
GL_POLYGON_BIT = _CorePython.GL_POLYGON_BIT
GL_POLYGON_STIPPLE_BIT = _CorePython.GL_POLYGON_STIPPLE_BIT
GL_PIXEL_MODE_BIT = _CorePython.GL_PIXEL_MODE_BIT
GL_LIGHTING_BIT = _CorePython.GL_LIGHTING_BIT
GL_FOG_BIT = _CorePython.GL_FOG_BIT
GL_ACCUM_BUFFER_BIT = _CorePython.GL_ACCUM_BUFFER_BIT
GL_VIEWPORT_BIT = _CorePython.GL_VIEWPORT_BIT
GL_TRANSFORM_BIT = _CorePython.GL_TRANSFORM_BIT
GL_ENABLE_BIT = _CorePython.GL_ENABLE_BIT
GL_HINT_BIT = _CorePython.GL_HINT_BIT
GL_EVAL_BIT = _CorePython.GL_EVAL_BIT
GL_LIST_BIT = _CorePython.GL_LIST_BIT
GL_TEXTURE_BIT = _CorePython.GL_TEXTURE_BIT
GL_SCISSOR_BIT = _CorePython.GL_SCISSOR_BIT
GL_ALL_ATTRIB_BITS = _CorePython.GL_ALL_ATTRIB_BITS
GL_QUAD_STRIP = _CorePython.GL_QUAD_STRIP
GL_POLYGON = _CorePython.GL_POLYGON
GL_ACCUM = _CorePython.GL_ACCUM
GL_LOAD = _CorePython.GL_LOAD
GL_RETURN = _CorePython.GL_RETURN
GL_MULT = _CorePython.GL_MULT
GL_ADD = _CorePython.GL_ADD
GL_AUX0 = _CorePython.GL_AUX0
GL_AUX1 = _CorePython.GL_AUX1
GL_AUX2 = _CorePython.GL_AUX2
GL_AUX3 = _CorePython.GL_AUX3
GL_2D = _CorePython.GL_2D
GL_3D = _CorePython.GL_3D
GL_3D_COLOR = _CorePython.GL_3D_COLOR
GL_3D_COLOR_TEXTURE = _CorePython.GL_3D_COLOR_TEXTURE
GL_4D_COLOR_TEXTURE = _CorePython.GL_4D_COLOR_TEXTURE
GL_PASS_THROUGH_TOKEN = _CorePython.GL_PASS_THROUGH_TOKEN
GL_POINT_TOKEN = _CorePython.GL_POINT_TOKEN
GL_LINE_TOKEN = _CorePython.GL_LINE_TOKEN
GL_POLYGON_TOKEN = _CorePython.GL_POLYGON_TOKEN
GL_BITMAP_TOKEN = _CorePython.GL_BITMAP_TOKEN
GL_DRAW_PIXEL_TOKEN = _CorePython.GL_DRAW_PIXEL_TOKEN
GL_COPY_PIXEL_TOKEN = _CorePython.GL_COPY_PIXEL_TOKEN
GL_LINE_RESET_TOKEN = _CorePython.GL_LINE_RESET_TOKEN
GL_EXP = _CorePython.GL_EXP
GL_EXP2 = _CorePython.GL_EXP2
GL_COEFF = _CorePython.GL_COEFF
GL_ORDER = _CorePython.GL_ORDER
GL_DOMAIN = _CorePython.GL_DOMAIN
GL_PIXEL_MAP_I_TO_I = _CorePython.GL_PIXEL_MAP_I_TO_I
GL_PIXEL_MAP_S_TO_S = _CorePython.GL_PIXEL_MAP_S_TO_S
GL_PIXEL_MAP_I_TO_R = _CorePython.GL_PIXEL_MAP_I_TO_R
GL_PIXEL_MAP_I_TO_G = _CorePython.GL_PIXEL_MAP_I_TO_G
GL_PIXEL_MAP_I_TO_B = _CorePython.GL_PIXEL_MAP_I_TO_B
GL_PIXEL_MAP_I_TO_A = _CorePython.GL_PIXEL_MAP_I_TO_A
GL_PIXEL_MAP_R_TO_R = _CorePython.GL_PIXEL_MAP_R_TO_R
GL_PIXEL_MAP_G_TO_G = _CorePython.GL_PIXEL_MAP_G_TO_G
GL_PIXEL_MAP_B_TO_B = _CorePython.GL_PIXEL_MAP_B_TO_B
GL_PIXEL_MAP_A_TO_A = _CorePython.GL_PIXEL_MAP_A_TO_A
GL_CURRENT_COLOR = _CorePython.GL_CURRENT_COLOR
GL_CURRENT_INDEX = _CorePython.GL_CURRENT_INDEX
GL_CURRENT_NORMAL = _CorePython.GL_CURRENT_NORMAL
GL_CURRENT_TEXTURE_COORDS = _CorePython.GL_CURRENT_TEXTURE_COORDS
GL_CURRENT_RASTER_COLOR = _CorePython.GL_CURRENT_RASTER_COLOR
GL_CURRENT_RASTER_INDEX = _CorePython.GL_CURRENT_RASTER_INDEX
GL_CURRENT_RASTER_TEXTURE_COORDS = _CorePython.GL_CURRENT_RASTER_TEXTURE_COORDS
GL_CURRENT_RASTER_POSITION = _CorePython.GL_CURRENT_RASTER_POSITION
GL_CURRENT_RASTER_POSITION_VALID = _CorePython.GL_CURRENT_RASTER_POSITION_VALID
GL_CURRENT_RASTER_DISTANCE = _CorePython.GL_CURRENT_RASTER_DISTANCE
GL_POINT_SMOOTH = _CorePython.GL_POINT_SMOOTH
GL_LINE_STIPPLE = _CorePython.GL_LINE_STIPPLE
GL_LINE_STIPPLE_PATTERN = _CorePython.GL_LINE_STIPPLE_PATTERN
GL_LINE_STIPPLE_REPEAT = _CorePython.GL_LINE_STIPPLE_REPEAT
GL_LIST_MODE = _CorePython.GL_LIST_MODE
GL_MAX_LIST_NESTING = _CorePython.GL_MAX_LIST_NESTING
GL_LIST_BASE = _CorePython.GL_LIST_BASE
GL_LIST_INDEX = _CorePython.GL_LIST_INDEX
GL_POLYGON_STIPPLE = _CorePython.GL_POLYGON_STIPPLE
GL_EDGE_FLAG = _CorePython.GL_EDGE_FLAG
GL_LIGHTING = _CorePython.GL_LIGHTING
GL_LIGHT_MODEL_LOCAL_VIEWER = _CorePython.GL_LIGHT_MODEL_LOCAL_VIEWER
GL_LIGHT_MODEL_TWO_SIDE = _CorePython.GL_LIGHT_MODEL_TWO_SIDE
GL_LIGHT_MODEL_AMBIENT = _CorePython.GL_LIGHT_MODEL_AMBIENT
GL_SHADE_MODEL = _CorePython.GL_SHADE_MODEL
GL_COLOR_MATERIAL_FACE = _CorePython.GL_COLOR_MATERIAL_FACE
GL_COLOR_MATERIAL_PARAMETER = _CorePython.GL_COLOR_MATERIAL_PARAMETER
GL_COLOR_MATERIAL = _CorePython.GL_COLOR_MATERIAL
GL_FOG = _CorePython.GL_FOG
GL_FOG_INDEX = _CorePython.GL_FOG_INDEX
GL_FOG_DENSITY = _CorePython.GL_FOG_DENSITY
GL_FOG_START = _CorePython.GL_FOG_START
GL_FOG_END = _CorePython.GL_FOG_END
GL_FOG_MODE = _CorePython.GL_FOG_MODE
GL_FOG_COLOR = _CorePython.GL_FOG_COLOR
GL_ACCUM_CLEAR_VALUE = _CorePython.GL_ACCUM_CLEAR_VALUE
GL_MATRIX_MODE = _CorePython.GL_MATRIX_MODE
GL_NORMALIZE = _CorePython.GL_NORMALIZE
GL_MODELVIEW_STACK_DEPTH = _CorePython.GL_MODELVIEW_STACK_DEPTH
GL_PROJECTION_STACK_DEPTH = _CorePython.GL_PROJECTION_STACK_DEPTH
GL_TEXTURE_STACK_DEPTH = _CorePython.GL_TEXTURE_STACK_DEPTH
GL_MODELVIEW_MATRIX = _CorePython.GL_MODELVIEW_MATRIX
GL_PROJECTION_MATRIX = _CorePython.GL_PROJECTION_MATRIX
GL_TEXTURE_MATRIX = _CorePython.GL_TEXTURE_MATRIX
GL_ATTRIB_STACK_DEPTH = _CorePython.GL_ATTRIB_STACK_DEPTH
GL_ALPHA_TEST = _CorePython.GL_ALPHA_TEST
GL_ALPHA_TEST_FUNC = _CorePython.GL_ALPHA_TEST_FUNC
GL_ALPHA_TEST_REF = _CorePython.GL_ALPHA_TEST_REF
GL_LOGIC_OP = _CorePython.GL_LOGIC_OP
GL_AUX_BUFFERS = _CorePython.GL_AUX_BUFFERS
GL_INDEX_CLEAR_VALUE = _CorePython.GL_INDEX_CLEAR_VALUE
GL_INDEX_WRITEMASK = _CorePython.GL_INDEX_WRITEMASK
GL_INDEX_MODE = _CorePython.GL_INDEX_MODE
GL_RGBA_MODE = _CorePython.GL_RGBA_MODE
GL_RENDER_MODE = _CorePython.GL_RENDER_MODE
GL_PERSPECTIVE_CORRECTION_HINT = _CorePython.GL_PERSPECTIVE_CORRECTION_HINT
GL_POINT_SMOOTH_HINT = _CorePython.GL_POINT_SMOOTH_HINT
GL_FOG_HINT = _CorePython.GL_FOG_HINT
GL_TEXTURE_GEN_S = _CorePython.GL_TEXTURE_GEN_S
GL_TEXTURE_GEN_T = _CorePython.GL_TEXTURE_GEN_T
GL_TEXTURE_GEN_R = _CorePython.GL_TEXTURE_GEN_R
GL_TEXTURE_GEN_Q = _CorePython.GL_TEXTURE_GEN_Q
GL_PIXEL_MAP_I_TO_I_SIZE = _CorePython.GL_PIXEL_MAP_I_TO_I_SIZE
GL_PIXEL_MAP_S_TO_S_SIZE = _CorePython.GL_PIXEL_MAP_S_TO_S_SIZE
GL_PIXEL_MAP_I_TO_R_SIZE = _CorePython.GL_PIXEL_MAP_I_TO_R_SIZE
GL_PIXEL_MAP_I_TO_G_SIZE = _CorePython.GL_PIXEL_MAP_I_TO_G_SIZE
GL_PIXEL_MAP_I_TO_B_SIZE = _CorePython.GL_PIXEL_MAP_I_TO_B_SIZE
GL_PIXEL_MAP_I_TO_A_SIZE = _CorePython.GL_PIXEL_MAP_I_TO_A_SIZE
GL_PIXEL_MAP_R_TO_R_SIZE = _CorePython.GL_PIXEL_MAP_R_TO_R_SIZE
GL_PIXEL_MAP_G_TO_G_SIZE = _CorePython.GL_PIXEL_MAP_G_TO_G_SIZE
GL_PIXEL_MAP_B_TO_B_SIZE = _CorePython.GL_PIXEL_MAP_B_TO_B_SIZE
GL_PIXEL_MAP_A_TO_A_SIZE = _CorePython.GL_PIXEL_MAP_A_TO_A_SIZE
GL_MAP_COLOR = _CorePython.GL_MAP_COLOR
GL_MAP_STENCIL = _CorePython.GL_MAP_STENCIL
GL_INDEX_SHIFT = _CorePython.GL_INDEX_SHIFT
GL_INDEX_OFFSET = _CorePython.GL_INDEX_OFFSET
GL_RED_SCALE = _CorePython.GL_RED_SCALE
GL_RED_BIAS = _CorePython.GL_RED_BIAS
GL_ZOOM_X = _CorePython.GL_ZOOM_X
GL_ZOOM_Y = _CorePython.GL_ZOOM_Y
GL_GREEN_SCALE = _CorePython.GL_GREEN_SCALE
GL_GREEN_BIAS = _CorePython.GL_GREEN_BIAS
GL_BLUE_SCALE = _CorePython.GL_BLUE_SCALE
GL_BLUE_BIAS = _CorePython.GL_BLUE_BIAS
GL_ALPHA_SCALE = _CorePython.GL_ALPHA_SCALE
GL_ALPHA_BIAS = _CorePython.GL_ALPHA_BIAS
GL_DEPTH_SCALE = _CorePython.GL_DEPTH_SCALE
GL_DEPTH_BIAS = _CorePython.GL_DEPTH_BIAS
GL_MAX_EVAL_ORDER = _CorePython.GL_MAX_EVAL_ORDER
GL_MAX_LIGHTS = _CorePython.GL_MAX_LIGHTS
GL_MAX_CLIP_PLANES = _CorePython.GL_MAX_CLIP_PLANES
GL_MAX_PIXEL_MAP_TABLE = _CorePython.GL_MAX_PIXEL_MAP_TABLE
GL_MAX_ATTRIB_STACK_DEPTH = _CorePython.GL_MAX_ATTRIB_STACK_DEPTH
GL_MAX_MODELVIEW_STACK_DEPTH = _CorePython.GL_MAX_MODELVIEW_STACK_DEPTH
GL_MAX_NAME_STACK_DEPTH = _CorePython.GL_MAX_NAME_STACK_DEPTH
GL_MAX_PROJECTION_STACK_DEPTH = _CorePython.GL_MAX_PROJECTION_STACK_DEPTH
GL_MAX_TEXTURE_STACK_DEPTH = _CorePython.GL_MAX_TEXTURE_STACK_DEPTH
GL_INDEX_BITS = _CorePython.GL_INDEX_BITS
GL_RED_BITS = _CorePython.GL_RED_BITS
GL_GREEN_BITS = _CorePython.GL_GREEN_BITS
GL_BLUE_BITS = _CorePython.GL_BLUE_BITS
GL_ALPHA_BITS = _CorePython.GL_ALPHA_BITS
GL_DEPTH_BITS = _CorePython.GL_DEPTH_BITS
GL_STENCIL_BITS = _CorePython.GL_STENCIL_BITS
GL_ACCUM_RED_BITS = _CorePython.GL_ACCUM_RED_BITS
GL_ACCUM_GREEN_BITS = _CorePython.GL_ACCUM_GREEN_BITS
GL_ACCUM_BLUE_BITS = _CorePython.GL_ACCUM_BLUE_BITS
GL_ACCUM_ALPHA_BITS = _CorePython.GL_ACCUM_ALPHA_BITS
GL_NAME_STACK_DEPTH = _CorePython.GL_NAME_STACK_DEPTH
GL_AUTO_NORMAL = _CorePython.GL_AUTO_NORMAL
GL_MAP1_COLOR_4 = _CorePython.GL_MAP1_COLOR_4
GL_MAP1_INDEX = _CorePython.GL_MAP1_INDEX
GL_MAP1_NORMAL = _CorePython.GL_MAP1_NORMAL
GL_MAP1_TEXTURE_COORD_1 = _CorePython.GL_MAP1_TEXTURE_COORD_1
GL_MAP1_TEXTURE_COORD_2 = _CorePython.GL_MAP1_TEXTURE_COORD_2
GL_MAP1_TEXTURE_COORD_3 = _CorePython.GL_MAP1_TEXTURE_COORD_3
GL_MAP1_TEXTURE_COORD_4 = _CorePython.GL_MAP1_TEXTURE_COORD_4
GL_MAP1_VERTEX_3 = _CorePython.GL_MAP1_VERTEX_3
GL_MAP1_VERTEX_4 = _CorePython.GL_MAP1_VERTEX_4
GL_MAP2_COLOR_4 = _CorePython.GL_MAP2_COLOR_4
GL_MAP2_INDEX = _CorePython.GL_MAP2_INDEX
GL_MAP2_NORMAL = _CorePython.GL_MAP2_NORMAL
GL_MAP2_TEXTURE_COORD_1 = _CorePython.GL_MAP2_TEXTURE_COORD_1
GL_MAP2_TEXTURE_COORD_2 = _CorePython.GL_MAP2_TEXTURE_COORD_2
GL_MAP2_TEXTURE_COORD_3 = _CorePython.GL_MAP2_TEXTURE_COORD_3
GL_MAP2_TEXTURE_COORD_4 = _CorePython.GL_MAP2_TEXTURE_COORD_4
GL_MAP2_VERTEX_3 = _CorePython.GL_MAP2_VERTEX_3
GL_MAP2_VERTEX_4 = _CorePython.GL_MAP2_VERTEX_4
GL_MAP1_GRID_DOMAIN = _CorePython.GL_MAP1_GRID_DOMAIN
GL_MAP1_GRID_SEGMENTS = _CorePython.GL_MAP1_GRID_SEGMENTS
GL_MAP2_GRID_DOMAIN = _CorePython.GL_MAP2_GRID_DOMAIN
GL_MAP2_GRID_SEGMENTS = _CorePython.GL_MAP2_GRID_SEGMENTS
GL_TEXTURE_COMPONENTS = _CorePython.GL_TEXTURE_COMPONENTS
GL_TEXTURE_BORDER = _CorePython.GL_TEXTURE_BORDER
GL_AMBIENT = _CorePython.GL_AMBIENT
GL_DIFFUSE = _CorePython.GL_DIFFUSE
GL_SPECULAR = _CorePython.GL_SPECULAR
GL_POSITION = _CorePython.GL_POSITION
GL_SPOT_DIRECTION = _CorePython.GL_SPOT_DIRECTION
GL_SPOT_EXPONENT = _CorePython.GL_SPOT_EXPONENT
GL_SPOT_CUTOFF = _CorePython.GL_SPOT_CUTOFF
GL_CONSTANT_ATTENUATION = _CorePython.GL_CONSTANT_ATTENUATION
GL_LINEAR_ATTENUATION = _CorePython.GL_LINEAR_ATTENUATION
GL_QUADRATIC_ATTENUATION = _CorePython.GL_QUADRATIC_ATTENUATION
GL_COMPILE = _CorePython.GL_COMPILE
GL_COMPILE_AND_EXECUTE = _CorePython.GL_COMPILE_AND_EXECUTE
GL_2_BYTES = _CorePython.GL_2_BYTES
GL_3_BYTES = _CorePython.GL_3_BYTES
GL_4_BYTES = _CorePython.GL_4_BYTES
GL_EMISSION = _CorePython.GL_EMISSION
GL_SHININESS = _CorePython.GL_SHININESS
GL_AMBIENT_AND_DIFFUSE = _CorePython.GL_AMBIENT_AND_DIFFUSE
GL_COLOR_INDEXES = _CorePython.GL_COLOR_INDEXES
GL_MODELVIEW = _CorePython.GL_MODELVIEW
GL_PROJECTION = _CorePython.GL_PROJECTION
GL_COLOR_INDEX = _CorePython.GL_COLOR_INDEX
GL_LUMINANCE = _CorePython.GL_LUMINANCE
GL_LUMINANCE_ALPHA = _CorePython.GL_LUMINANCE_ALPHA
GL_BITMAP = _CorePython.GL_BITMAP
GL_RENDER = _CorePython.GL_RENDER
GL_FEEDBACK = _CorePython.GL_FEEDBACK
GL_SELECT = _CorePython.GL_SELECT
GL_FLAT = _CorePython.GL_FLAT
GL_SMOOTH = _CorePython.GL_SMOOTH
GL_S = _CorePython.GL_S
GL_T = _CorePython.GL_T
GL_R = _CorePython.GL_R
GL_Q = _CorePython.GL_Q
GL_MODULATE = _CorePython.GL_MODULATE
GL_DECAL = _CorePython.GL_DECAL
GL_TEXTURE_ENV_MODE = _CorePython.GL_TEXTURE_ENV_MODE
GL_TEXTURE_ENV_COLOR = _CorePython.GL_TEXTURE_ENV_COLOR
GL_TEXTURE_ENV = _CorePython.GL_TEXTURE_ENV
GL_EYE_LINEAR = _CorePython.GL_EYE_LINEAR
GL_OBJECT_LINEAR = _CorePython.GL_OBJECT_LINEAR
GL_SPHERE_MAP = _CorePython.GL_SPHERE_MAP
GL_TEXTURE_GEN_MODE = _CorePython.GL_TEXTURE_GEN_MODE
GL_OBJECT_PLANE = _CorePython.GL_OBJECT_PLANE
GL_EYE_PLANE = _CorePython.GL_EYE_PLANE
GL_CLAMP = _CorePython.GL_CLAMP
GL_CLIP_PLANE0 = _CorePython.GL_CLIP_PLANE0
GL_CLIP_PLANE1 = _CorePython.GL_CLIP_PLANE1
GL_CLIP_PLANE2 = _CorePython.GL_CLIP_PLANE2
GL_CLIP_PLANE3 = _CorePython.GL_CLIP_PLANE3
GL_CLIP_PLANE4 = _CorePython.GL_CLIP_PLANE4
GL_CLIP_PLANE5 = _CorePython.GL_CLIP_PLANE5
GL_LIGHT0 = _CorePython.GL_LIGHT0
GL_LIGHT1 = _CorePython.GL_LIGHT1
GL_LIGHT2 = _CorePython.GL_LIGHT2
GL_LIGHT3 = _CorePython.GL_LIGHT3
GL_LIGHT4 = _CorePython.GL_LIGHT4
GL_LIGHT5 = _CorePython.GL_LIGHT5
GL_LIGHT6 = _CorePython.GL_LIGHT6
GL_LIGHT7 = _CorePython.GL_LIGHT7
GL_COLOR_LOGIC_OP = _CorePython.GL_COLOR_LOGIC_OP
GL_POLYGON_OFFSET_UNITS = _CorePython.GL_POLYGON_OFFSET_UNITS
GL_POLYGON_OFFSET_POINT = _CorePython.GL_POLYGON_OFFSET_POINT
GL_POLYGON_OFFSET_LINE = _CorePython.GL_POLYGON_OFFSET_LINE
GL_POLYGON_OFFSET_FILL = _CorePython.GL_POLYGON_OFFSET_FILL
GL_POLYGON_OFFSET_FACTOR = _CorePython.GL_POLYGON_OFFSET_FACTOR
GL_TEXTURE_BINDING_1D = _CorePython.GL_TEXTURE_BINDING_1D
GL_TEXTURE_BINDING_2D = _CorePython.GL_TEXTURE_BINDING_2D
GL_TEXTURE_INTERNAL_FORMAT = _CorePython.GL_TEXTURE_INTERNAL_FORMAT
GL_TEXTURE_RED_SIZE = _CorePython.GL_TEXTURE_RED_SIZE
GL_TEXTURE_GREEN_SIZE = _CorePython.GL_TEXTURE_GREEN_SIZE
GL_TEXTURE_BLUE_SIZE = _CorePython.GL_TEXTURE_BLUE_SIZE
GL_TEXTURE_ALPHA_SIZE = _CorePython.GL_TEXTURE_ALPHA_SIZE
GL_DOUBLE = _CorePython.GL_DOUBLE
GL_PROXY_TEXTURE_1D = _CorePython.GL_PROXY_TEXTURE_1D
GL_PROXY_TEXTURE_2D = _CorePython.GL_PROXY_TEXTURE_2D
GL_R3_G3_B2 = _CorePython.GL_R3_G3_B2
GL_RGB4 = _CorePython.GL_RGB4
GL_RGB5 = _CorePython.GL_RGB5
GL_RGB8 = _CorePython.GL_RGB8
GL_RGB10 = _CorePython.GL_RGB10
GL_RGB12 = _CorePython.GL_RGB12
GL_RGB16 = _CorePython.GL_RGB16
GL_RGBA2 = _CorePython.GL_RGBA2
GL_RGBA4 = _CorePython.GL_RGBA4
GL_RGB5_A1 = _CorePython.GL_RGB5_A1
GL_RGBA8 = _CorePython.GL_RGBA8
GL_RGB10_A2 = _CorePython.GL_RGB10_A2
GL_RGBA12 = _CorePython.GL_RGBA12
GL_RGBA16 = _CorePython.GL_RGBA16
GL_CLIENT_PIXEL_STORE_BIT = _CorePython.GL_CLIENT_PIXEL_STORE_BIT
GL_CLIENT_VERTEX_ARRAY_BIT = _CorePython.GL_CLIENT_VERTEX_ARRAY_BIT
GL_CLIENT_ALL_ATTRIB_BITS = _CorePython.GL_CLIENT_ALL_ATTRIB_BITS
GL_VERTEX_ARRAY_POINTER = _CorePython.GL_VERTEX_ARRAY_POINTER
GL_NORMAL_ARRAY_POINTER = _CorePython.GL_NORMAL_ARRAY_POINTER
GL_COLOR_ARRAY_POINTER = _CorePython.GL_COLOR_ARRAY_POINTER
GL_INDEX_ARRAY_POINTER = _CorePython.GL_INDEX_ARRAY_POINTER
GL_TEXTURE_COORD_ARRAY_POINTER = _CorePython.GL_TEXTURE_COORD_ARRAY_POINTER
GL_EDGE_FLAG_ARRAY_POINTER = _CorePython.GL_EDGE_FLAG_ARRAY_POINTER
GL_FEEDBACK_BUFFER_POINTER = _CorePython.GL_FEEDBACK_BUFFER_POINTER
GL_SELECTION_BUFFER_POINTER = _CorePython.GL_SELECTION_BUFFER_POINTER
GL_CLIENT_ATTRIB_STACK_DEPTH = _CorePython.GL_CLIENT_ATTRIB_STACK_DEPTH
GL_INDEX_LOGIC_OP = _CorePython.GL_INDEX_LOGIC_OP
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = _CorePython.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
GL_FEEDBACK_BUFFER_SIZE = _CorePython.GL_FEEDBACK_BUFFER_SIZE
GL_FEEDBACK_BUFFER_TYPE = _CorePython.GL_FEEDBACK_BUFFER_TYPE
GL_SELECTION_BUFFER_SIZE = _CorePython.GL_SELECTION_BUFFER_SIZE
GL_VERTEX_ARRAY = _CorePython.GL_VERTEX_ARRAY
GL_NORMAL_ARRAY = _CorePython.GL_NORMAL_ARRAY
GL_COLOR_ARRAY = _CorePython.GL_COLOR_ARRAY
GL_INDEX_ARRAY = _CorePython.GL_INDEX_ARRAY
GL_TEXTURE_COORD_ARRAY = _CorePython.GL_TEXTURE_COORD_ARRAY
GL_EDGE_FLAG_ARRAY = _CorePython.GL_EDGE_FLAG_ARRAY
GL_VERTEX_ARRAY_SIZE = _CorePython.GL_VERTEX_ARRAY_SIZE
GL_VERTEX_ARRAY_TYPE = _CorePython.GL_VERTEX_ARRAY_TYPE
GL_VERTEX_ARRAY_STRIDE = _CorePython.GL_VERTEX_ARRAY_STRIDE
GL_NORMAL_ARRAY_TYPE = _CorePython.GL_NORMAL_ARRAY_TYPE
GL_NORMAL_ARRAY_STRIDE = _CorePython.GL_NORMAL_ARRAY_STRIDE
GL_COLOR_ARRAY_SIZE = _CorePython.GL_COLOR_ARRAY_SIZE
GL_COLOR_ARRAY_TYPE = _CorePython.GL_COLOR_ARRAY_TYPE
GL_COLOR_ARRAY_STRIDE = _CorePython.GL_COLOR_ARRAY_STRIDE
GL_INDEX_ARRAY_TYPE = _CorePython.GL_INDEX_ARRAY_TYPE
GL_INDEX_ARRAY_STRIDE = _CorePython.GL_INDEX_ARRAY_STRIDE
GL_TEXTURE_COORD_ARRAY_SIZE = _CorePython.GL_TEXTURE_COORD_ARRAY_SIZE
GL_TEXTURE_COORD_ARRAY_TYPE = _CorePython.GL_TEXTURE_COORD_ARRAY_TYPE
GL_TEXTURE_COORD_ARRAY_STRIDE = _CorePython.GL_TEXTURE_COORD_ARRAY_STRIDE
GL_EDGE_FLAG_ARRAY_STRIDE = _CorePython.GL_EDGE_FLAG_ARRAY_STRIDE
GL_TEXTURE_LUMINANCE_SIZE = _CorePython.GL_TEXTURE_LUMINANCE_SIZE
GL_TEXTURE_INTENSITY_SIZE = _CorePython.GL_TEXTURE_INTENSITY_SIZE
GL_TEXTURE_PRIORITY = _CorePython.GL_TEXTURE_PRIORITY
GL_TEXTURE_RESIDENT = _CorePython.GL_TEXTURE_RESIDENT
GL_ALPHA4 = _CorePython.GL_ALPHA4
GL_ALPHA8 = _CorePython.GL_ALPHA8
GL_ALPHA12 = _CorePython.GL_ALPHA12
GL_ALPHA16 = _CorePython.GL_ALPHA16
GL_LUMINANCE4 = _CorePython.GL_LUMINANCE4
GL_LUMINANCE8 = _CorePython.GL_LUMINANCE8
GL_LUMINANCE12 = _CorePython.GL_LUMINANCE12
GL_LUMINANCE16 = _CorePython.GL_LUMINANCE16
GL_LUMINANCE4_ALPHA4 = _CorePython.GL_LUMINANCE4_ALPHA4
GL_LUMINANCE6_ALPHA2 = _CorePython.GL_LUMINANCE6_ALPHA2
GL_LUMINANCE8_ALPHA8 = _CorePython.GL_LUMINANCE8_ALPHA8
GL_LUMINANCE12_ALPHA4 = _CorePython.GL_LUMINANCE12_ALPHA4
GL_LUMINANCE12_ALPHA12 = _CorePython.GL_LUMINANCE12_ALPHA12
GL_LUMINANCE16_ALPHA16 = _CorePython.GL_LUMINANCE16_ALPHA16
GL_INTENSITY = _CorePython.GL_INTENSITY
GL_INTENSITY4 = _CorePython.GL_INTENSITY4
GL_INTENSITY8 = _CorePython.GL_INTENSITY8
GL_INTENSITY12 = _CorePython.GL_INTENSITY12
GL_INTENSITY16 = _CorePython.GL_INTENSITY16
GL_V2F = _CorePython.GL_V2F
GL_V3F = _CorePython.GL_V3F
GL_C4UB_V2F = _CorePython.GL_C4UB_V2F
GL_C4UB_V3F = _CorePython.GL_C4UB_V3F
GL_C3F_V3F = _CorePython.GL_C3F_V3F
GL_N3F_V3F = _CorePython.GL_N3F_V3F
GL_C4F_N3F_V3F = _CorePython.GL_C4F_N3F_V3F
GL_T2F_V3F = _CorePython.GL_T2F_V3F
GL_T4F_V4F = _CorePython.GL_T4F_V4F
GL_T2F_C4UB_V3F = _CorePython.GL_T2F_C4UB_V3F
GL_T2F_C3F_V3F = _CorePython.GL_T2F_C3F_V3F
GL_T2F_N3F_V3F = _CorePython.GL_T2F_N3F_V3F
GL_T2F_C4F_N3F_V3F = _CorePython.GL_T2F_C4F_N3F_V3F
GL_T4F_C4F_N3F_V4F = _CorePython.GL_T4F_C4F_N3F_V4F
GL_UNSIGNED_BYTE_3_3_2 = _CorePython.GL_UNSIGNED_BYTE_3_3_2
GL_UNSIGNED_SHORT_4_4_4_4 = _CorePython.GL_UNSIGNED_SHORT_4_4_4_4
GL_UNSIGNED_SHORT_5_5_5_1 = _CorePython.GL_UNSIGNED_SHORT_5_5_5_1
GL_UNSIGNED_INT_8_8_8_8 = _CorePython.GL_UNSIGNED_INT_8_8_8_8
GL_UNSIGNED_INT_10_10_10_2 = _CorePython.GL_UNSIGNED_INT_10_10_10_2
GL_TEXTURE_BINDING_3D = _CorePython.GL_TEXTURE_BINDING_3D
GL_PACK_SKIP_IMAGES = _CorePython.GL_PACK_SKIP_IMAGES
GL_PACK_IMAGE_HEIGHT = _CorePython.GL_PACK_IMAGE_HEIGHT
GL_UNPACK_SKIP_IMAGES = _CorePython.GL_UNPACK_SKIP_IMAGES
GL_UNPACK_IMAGE_HEIGHT = _CorePython.GL_UNPACK_IMAGE_HEIGHT
GL_TEXTURE_3D = _CorePython.GL_TEXTURE_3D
GL_PROXY_TEXTURE_3D = _CorePython.GL_PROXY_TEXTURE_3D
GL_TEXTURE_DEPTH = _CorePython.GL_TEXTURE_DEPTH
GL_TEXTURE_WRAP_R = _CorePython.GL_TEXTURE_WRAP_R
GL_MAX_3D_TEXTURE_SIZE = _CorePython.GL_MAX_3D_TEXTURE_SIZE
GL_UNSIGNED_BYTE_2_3_3_REV = _CorePython.GL_UNSIGNED_BYTE_2_3_3_REV
GL_UNSIGNED_SHORT_5_6_5 = _CorePython.GL_UNSIGNED_SHORT_5_6_5
GL_UNSIGNED_SHORT_5_6_5_REV = _CorePython.GL_UNSIGNED_SHORT_5_6_5_REV
GL_UNSIGNED_SHORT_4_4_4_4_REV = _CorePython.GL_UNSIGNED_SHORT_4_4_4_4_REV
GL_UNSIGNED_SHORT_1_5_5_5_REV = _CorePython.GL_UNSIGNED_SHORT_1_5_5_5_REV
GL_UNSIGNED_INT_8_8_8_8_REV = _CorePython.GL_UNSIGNED_INT_8_8_8_8_REV
GL_UNSIGNED_INT_2_10_10_10_REV = _CorePython.GL_UNSIGNED_INT_2_10_10_10_REV
GL_BGR = _CorePython.GL_BGR
GL_BGRA = _CorePython.GL_BGRA
GL_MAX_ELEMENTS_VERTICES = _CorePython.GL_MAX_ELEMENTS_VERTICES
GL_MAX_ELEMENTS_INDICES = _CorePython.GL_MAX_ELEMENTS_INDICES
GL_CLAMP_TO_EDGE = _CorePython.GL_CLAMP_TO_EDGE
GL_TEXTURE_MIN_LOD = _CorePython.GL_TEXTURE_MIN_LOD
GL_TEXTURE_MAX_LOD = _CorePython.GL_TEXTURE_MAX_LOD
GL_TEXTURE_BASE_LEVEL = _CorePython.GL_TEXTURE_BASE_LEVEL
GL_TEXTURE_MAX_LEVEL = _CorePython.GL_TEXTURE_MAX_LEVEL
GL_SMOOTH_POINT_SIZE_RANGE = _CorePython.GL_SMOOTH_POINT_SIZE_RANGE
GL_SMOOTH_POINT_SIZE_GRANULARITY = _CorePython.GL_SMOOTH_POINT_SIZE_GRANULARITY
GL_SMOOTH_LINE_WIDTH_RANGE = _CorePython.GL_SMOOTH_LINE_WIDTH_RANGE
GL_SMOOTH_LINE_WIDTH_GRANULARITY = _CorePython.GL_SMOOTH_LINE_WIDTH_GRANULARITY
GL_ALIASED_LINE_WIDTH_RANGE = _CorePython.GL_ALIASED_LINE_WIDTH_RANGE
GL_RESCALE_NORMAL = _CorePython.GL_RESCALE_NORMAL
GL_LIGHT_MODEL_COLOR_CONTROL = _CorePython.GL_LIGHT_MODEL_COLOR_CONTROL
GL_SINGLE_COLOR = _CorePython.GL_SINGLE_COLOR
GL_SEPARATE_SPECULAR_COLOR = _CorePython.GL_SEPARATE_SPECULAR_COLOR
GL_ALIASED_POINT_SIZE_RANGE = _CorePython.GL_ALIASED_POINT_SIZE_RANGE
GL_TEXTURE0 = _CorePython.GL_TEXTURE0
GL_TEXTURE1 = _CorePython.GL_TEXTURE1
GL_TEXTURE2 = _CorePython.GL_TEXTURE2
GL_TEXTURE3 = _CorePython.GL_TEXTURE3
GL_TEXTURE4 = _CorePython.GL_TEXTURE4
GL_TEXTURE5 = _CorePython.GL_TEXTURE5
GL_TEXTURE6 = _CorePython.GL_TEXTURE6
GL_TEXTURE7 = _CorePython.GL_TEXTURE7
GL_TEXTURE8 = _CorePython.GL_TEXTURE8
GL_TEXTURE9 = _CorePython.GL_TEXTURE9
GL_TEXTURE10 = _CorePython.GL_TEXTURE10
GL_TEXTURE11 = _CorePython.GL_TEXTURE11
GL_TEXTURE12 = _CorePython.GL_TEXTURE12
GL_TEXTURE13 = _CorePython.GL_TEXTURE13
GL_TEXTURE14 = _CorePython.GL_TEXTURE14
GL_TEXTURE15 = _CorePython.GL_TEXTURE15
GL_TEXTURE16 = _CorePython.GL_TEXTURE16
GL_TEXTURE17 = _CorePython.GL_TEXTURE17
GL_TEXTURE18 = _CorePython.GL_TEXTURE18
GL_TEXTURE19 = _CorePython.GL_TEXTURE19
GL_TEXTURE20 = _CorePython.GL_TEXTURE20
GL_TEXTURE21 = _CorePython.GL_TEXTURE21
GL_TEXTURE22 = _CorePython.GL_TEXTURE22
GL_TEXTURE23 = _CorePython.GL_TEXTURE23
GL_TEXTURE24 = _CorePython.GL_TEXTURE24
GL_TEXTURE25 = _CorePython.GL_TEXTURE25
GL_TEXTURE26 = _CorePython.GL_TEXTURE26
GL_TEXTURE27 = _CorePython.GL_TEXTURE27
GL_TEXTURE28 = _CorePython.GL_TEXTURE28
GL_TEXTURE29 = _CorePython.GL_TEXTURE29
GL_TEXTURE30 = _CorePython.GL_TEXTURE30
GL_TEXTURE31 = _CorePython.GL_TEXTURE31
GL_ACTIVE_TEXTURE = _CorePython.GL_ACTIVE_TEXTURE
GL_MULTISAMPLE = _CorePython.GL_MULTISAMPLE
GL_SAMPLE_ALPHA_TO_COVERAGE = _CorePython.GL_SAMPLE_ALPHA_TO_COVERAGE
GL_SAMPLE_ALPHA_TO_ONE = _CorePython.GL_SAMPLE_ALPHA_TO_ONE
GL_SAMPLE_COVERAGE = _CorePython.GL_SAMPLE_COVERAGE
GL_SAMPLE_BUFFERS = _CorePython.GL_SAMPLE_BUFFERS
GL_SAMPLES = _CorePython.GL_SAMPLES
GL_SAMPLE_COVERAGE_VALUE = _CorePython.GL_SAMPLE_COVERAGE_VALUE
GL_SAMPLE_COVERAGE_INVERT = _CorePython.GL_SAMPLE_COVERAGE_INVERT
GL_TEXTURE_CUBE_MAP = _CorePython.GL_TEXTURE_CUBE_MAP
GL_TEXTURE_BINDING_CUBE_MAP = _CorePython.GL_TEXTURE_BINDING_CUBE_MAP
GL_TEXTURE_CUBE_MAP_POSITIVE_X = _CorePython.GL_TEXTURE_CUBE_MAP_POSITIVE_X
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = _CorePython.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = _CorePython.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = _CorePython.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = _CorePython.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = _CorePython.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
GL_PROXY_TEXTURE_CUBE_MAP = _CorePython.GL_PROXY_TEXTURE_CUBE_MAP
GL_MAX_CUBE_MAP_TEXTURE_SIZE = _CorePython.GL_MAX_CUBE_MAP_TEXTURE_SIZE
GL_COMPRESSED_RGB = _CorePython.GL_COMPRESSED_RGB
GL_COMPRESSED_RGBA = _CorePython.GL_COMPRESSED_RGBA
GL_TEXTURE_COMPRESSION_HINT = _CorePython.GL_TEXTURE_COMPRESSION_HINT
GL_TEXTURE_COMPRESSED_IMAGE_SIZE = _CorePython.GL_TEXTURE_COMPRESSED_IMAGE_SIZE
GL_TEXTURE_COMPRESSED = _CorePython.GL_TEXTURE_COMPRESSED
GL_NUM_COMPRESSED_TEXTURE_FORMATS = _CorePython.GL_NUM_COMPRESSED_TEXTURE_FORMATS
GL_COMPRESSED_TEXTURE_FORMATS = _CorePython.GL_COMPRESSED_TEXTURE_FORMATS
GL_CLAMP_TO_BORDER = _CorePython.GL_CLAMP_TO_BORDER
GL_CLIENT_ACTIVE_TEXTURE = _CorePython.GL_CLIENT_ACTIVE_TEXTURE
GL_MAX_TEXTURE_UNITS = _CorePython.GL_MAX_TEXTURE_UNITS
GL_TRANSPOSE_MODELVIEW_MATRIX = _CorePython.GL_TRANSPOSE_MODELVIEW_MATRIX
GL_TRANSPOSE_PROJECTION_MATRIX = _CorePython.GL_TRANSPOSE_PROJECTION_MATRIX
GL_TRANSPOSE_TEXTURE_MATRIX = _CorePython.GL_TRANSPOSE_TEXTURE_MATRIX
GL_TRANSPOSE_COLOR_MATRIX = _CorePython.GL_TRANSPOSE_COLOR_MATRIX
GL_MULTISAMPLE_BIT = _CorePython.GL_MULTISAMPLE_BIT
GL_NORMAL_MAP = _CorePython.GL_NORMAL_MAP
GL_REFLECTION_MAP = _CorePython.GL_REFLECTION_MAP
GL_COMPRESSED_ALPHA = _CorePython.GL_COMPRESSED_ALPHA
GL_COMPRESSED_LUMINANCE = _CorePython.GL_COMPRESSED_LUMINANCE
GL_COMPRESSED_LUMINANCE_ALPHA = _CorePython.GL_COMPRESSED_LUMINANCE_ALPHA
GL_COMPRESSED_INTENSITY = _CorePython.GL_COMPRESSED_INTENSITY
GL_COMBINE = _CorePython.GL_COMBINE
GL_COMBINE_RGB = _CorePython.GL_COMBINE_RGB
GL_COMBINE_ALPHA = _CorePython.GL_COMBINE_ALPHA
GL_SOURCE0_RGB = _CorePython.GL_SOURCE0_RGB
GL_SOURCE1_RGB = _CorePython.GL_SOURCE1_RGB
GL_SOURCE2_RGB = _CorePython.GL_SOURCE2_RGB
GL_SOURCE0_ALPHA = _CorePython.GL_SOURCE0_ALPHA
GL_SOURCE1_ALPHA = _CorePython.GL_SOURCE1_ALPHA
GL_SOURCE2_ALPHA = _CorePython.GL_SOURCE2_ALPHA
GL_OPERAND0_RGB = _CorePython.GL_OPERAND0_RGB
GL_OPERAND1_RGB = _CorePython.GL_OPERAND1_RGB
GL_OPERAND2_RGB = _CorePython.GL_OPERAND2_RGB
GL_OPERAND0_ALPHA = _CorePython.GL_OPERAND0_ALPHA
GL_OPERAND1_ALPHA = _CorePython.GL_OPERAND1_ALPHA
GL_OPERAND2_ALPHA = _CorePython.GL_OPERAND2_ALPHA
GL_RGB_SCALE = _CorePython.GL_RGB_SCALE
GL_ADD_SIGNED = _CorePython.GL_ADD_SIGNED
GL_INTERPOLATE = _CorePython.GL_INTERPOLATE
GL_SUBTRACT = _CorePython.GL_SUBTRACT
GL_CONSTANT = _CorePython.GL_CONSTANT
GL_PRIMARY_COLOR = _CorePython.GL_PRIMARY_COLOR
GL_PREVIOUS = _CorePython.GL_PREVIOUS
GL_DOT3_RGB = _CorePython.GL_DOT3_RGB
GL_DOT3_RGBA = _CorePython.GL_DOT3_RGBA
GL_BLEND_DST_RGB = _CorePython.GL_BLEND_DST_RGB
GL_BLEND_SRC_RGB = _CorePython.GL_BLEND_SRC_RGB
GL_BLEND_DST_ALPHA = _CorePython.GL_BLEND_DST_ALPHA
GL_BLEND_SRC_ALPHA = _CorePython.GL_BLEND_SRC_ALPHA
GL_POINT_FADE_THRESHOLD_SIZE = _CorePython.GL_POINT_FADE_THRESHOLD_SIZE
GL_DEPTH_COMPONENT16 = _CorePython.GL_DEPTH_COMPONENT16
GL_DEPTH_COMPONENT24 = _CorePython.GL_DEPTH_COMPONENT24
GL_DEPTH_COMPONENT32 = _CorePython.GL_DEPTH_COMPONENT32
GL_MIRRORED_REPEAT = _CorePython.GL_MIRRORED_REPEAT
GL_MAX_TEXTURE_LOD_BIAS = _CorePython.GL_MAX_TEXTURE_LOD_BIAS
GL_TEXTURE_LOD_BIAS = _CorePython.GL_TEXTURE_LOD_BIAS
GL_INCR_WRAP = _CorePython.GL_INCR_WRAP
GL_DECR_WRAP = _CorePython.GL_DECR_WRAP
GL_TEXTURE_DEPTH_SIZE = _CorePython.GL_TEXTURE_DEPTH_SIZE
GL_TEXTURE_COMPARE_MODE = _CorePython.GL_TEXTURE_COMPARE_MODE
GL_TEXTURE_COMPARE_FUNC = _CorePython.GL_TEXTURE_COMPARE_FUNC
GL_POINT_SIZE_MIN = _CorePython.GL_POINT_SIZE_MIN
GL_POINT_SIZE_MAX = _CorePython.GL_POINT_SIZE_MAX
GL_POINT_DISTANCE_ATTENUATION = _CorePython.GL_POINT_DISTANCE_ATTENUATION
GL_GENERATE_MIPMAP = _CorePython.GL_GENERATE_MIPMAP
GL_GENERATE_MIPMAP_HINT = _CorePython.GL_GENERATE_MIPMAP_HINT
GL_FOG_COORDINATE_SOURCE = _CorePython.GL_FOG_COORDINATE_SOURCE
GL_FOG_COORDINATE = _CorePython.GL_FOG_COORDINATE
GL_FRAGMENT_DEPTH = _CorePython.GL_FRAGMENT_DEPTH
GL_CURRENT_FOG_COORDINATE = _CorePython.GL_CURRENT_FOG_COORDINATE
GL_FOG_COORDINATE_ARRAY_TYPE = _CorePython.GL_FOG_COORDINATE_ARRAY_TYPE
GL_FOG_COORDINATE_ARRAY_STRIDE = _CorePython.GL_FOG_COORDINATE_ARRAY_STRIDE
GL_FOG_COORDINATE_ARRAY_POINTER = _CorePython.GL_FOG_COORDINATE_ARRAY_POINTER
GL_FOG_COORDINATE_ARRAY = _CorePython.GL_FOG_COORDINATE_ARRAY
GL_COLOR_SUM = _CorePython.GL_COLOR_SUM
GL_CURRENT_SECONDARY_COLOR = _CorePython.GL_CURRENT_SECONDARY_COLOR
GL_SECONDARY_COLOR_ARRAY_SIZE = _CorePython.GL_SECONDARY_COLOR_ARRAY_SIZE
GL_SECONDARY_COLOR_ARRAY_TYPE = _CorePython.GL_SECONDARY_COLOR_ARRAY_TYPE
GL_SECONDARY_COLOR_ARRAY_STRIDE = _CorePython.GL_SECONDARY_COLOR_ARRAY_STRIDE
GL_SECONDARY_COLOR_ARRAY_POINTER = _CorePython.GL_SECONDARY_COLOR_ARRAY_POINTER
GL_SECONDARY_COLOR_ARRAY = _CorePython.GL_SECONDARY_COLOR_ARRAY
GL_TEXTURE_FILTER_CONTROL = _CorePython.GL_TEXTURE_FILTER_CONTROL
GL_DEPTH_TEXTURE_MODE = _CorePython.GL_DEPTH_TEXTURE_MODE
GL_COMPARE_R_TO_TEXTURE = _CorePython.GL_COMPARE_R_TO_TEXTURE
GL_BLEND_COLOR = _CorePython.GL_BLEND_COLOR
GL_BLEND_EQUATION = _CorePython.GL_BLEND_EQUATION
GL_CONSTANT_COLOR = _CorePython.GL_CONSTANT_COLOR
GL_ONE_MINUS_CONSTANT_COLOR = _CorePython.GL_ONE_MINUS_CONSTANT_COLOR
GL_CONSTANT_ALPHA = _CorePython.GL_CONSTANT_ALPHA
GL_ONE_MINUS_CONSTANT_ALPHA = _CorePython.GL_ONE_MINUS_CONSTANT_ALPHA
GL_FUNC_ADD = _CorePython.GL_FUNC_ADD
GL_FUNC_REVERSE_SUBTRACT = _CorePython.GL_FUNC_REVERSE_SUBTRACT
GL_FUNC_SUBTRACT = _CorePython.GL_FUNC_SUBTRACT
GL_MIN = _CorePython.GL_MIN
GL_MAX = _CorePython.GL_MAX
GL_BUFFER_SIZE = _CorePython.GL_BUFFER_SIZE
GL_BUFFER_USAGE = _CorePython.GL_BUFFER_USAGE
GL_QUERY_COUNTER_BITS = _CorePython.GL_QUERY_COUNTER_BITS
GL_CURRENT_QUERY = _CorePython.GL_CURRENT_QUERY
GL_QUERY_RESULT = _CorePython.GL_QUERY_RESULT
GL_QUERY_RESULT_AVAILABLE = _CorePython.GL_QUERY_RESULT_AVAILABLE
GL_ARRAY_BUFFER = _CorePython.GL_ARRAY_BUFFER
GL_ELEMENT_ARRAY_BUFFER = _CorePython.GL_ELEMENT_ARRAY_BUFFER
GL_ARRAY_BUFFER_BINDING = _CorePython.GL_ARRAY_BUFFER_BINDING
GL_ELEMENT_ARRAY_BUFFER_BINDING = _CorePython.GL_ELEMENT_ARRAY_BUFFER_BINDING
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = _CorePython.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
GL_READ_ONLY = _CorePython.GL_READ_ONLY
GL_WRITE_ONLY = _CorePython.GL_WRITE_ONLY
GL_READ_WRITE = _CorePython.GL_READ_WRITE
GL_BUFFER_ACCESS = _CorePython.GL_BUFFER_ACCESS
GL_BUFFER_MAPPED = _CorePython.GL_BUFFER_MAPPED
GL_BUFFER_MAP_POINTER = _CorePython.GL_BUFFER_MAP_POINTER
GL_STREAM_DRAW = _CorePython.GL_STREAM_DRAW
GL_STREAM_READ = _CorePython.GL_STREAM_READ
GL_STREAM_COPY = _CorePython.GL_STREAM_COPY
GL_STATIC_DRAW = _CorePython.GL_STATIC_DRAW
GL_STATIC_READ = _CorePython.GL_STATIC_READ
GL_STATIC_COPY = _CorePython.GL_STATIC_COPY
GL_DYNAMIC_DRAW = _CorePython.GL_DYNAMIC_DRAW
GL_DYNAMIC_READ = _CorePython.GL_DYNAMIC_READ
GL_DYNAMIC_COPY = _CorePython.GL_DYNAMIC_COPY
GL_SAMPLES_PASSED = _CorePython.GL_SAMPLES_PASSED
GL_SRC1_ALPHA = _CorePython.GL_SRC1_ALPHA
GL_VERTEX_ARRAY_BUFFER_BINDING = _CorePython.GL_VERTEX_ARRAY_BUFFER_BINDING
GL_NORMAL_ARRAY_BUFFER_BINDING = _CorePython.GL_NORMAL_ARRAY_BUFFER_BINDING
GL_COLOR_ARRAY_BUFFER_BINDING = _CorePython.GL_COLOR_ARRAY_BUFFER_BINDING
GL_INDEX_ARRAY_BUFFER_BINDING = _CorePython.GL_INDEX_ARRAY_BUFFER_BINDING
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = _CorePython.GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = _CorePython.GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = _CorePython.GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = _CorePython.GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
GL_WEIGHT_ARRAY_BUFFER_BINDING = _CorePython.GL_WEIGHT_ARRAY_BUFFER_BINDING
GL_FOG_COORD_SRC = _CorePython.GL_FOG_COORD_SRC
GL_FOG_COORD = _CorePython.GL_FOG_COORD
GL_CURRENT_FOG_COORD = _CorePython.GL_CURRENT_FOG_COORD
GL_FOG_COORD_ARRAY_TYPE = _CorePython.GL_FOG_COORD_ARRAY_TYPE
GL_FOG_COORD_ARRAY_STRIDE = _CorePython.GL_FOG_COORD_ARRAY_STRIDE
GL_FOG_COORD_ARRAY_POINTER = _CorePython.GL_FOG_COORD_ARRAY_POINTER
GL_FOG_COORD_ARRAY = _CorePython.GL_FOG_COORD_ARRAY
GL_FOG_COORD_ARRAY_BUFFER_BINDING = _CorePython.GL_FOG_COORD_ARRAY_BUFFER_BINDING
GL_SRC0_RGB = _CorePython.GL_SRC0_RGB
GL_SRC1_RGB = _CorePython.GL_SRC1_RGB
GL_SRC2_RGB = _CorePython.GL_SRC2_RGB
GL_SRC0_ALPHA = _CorePython.GL_SRC0_ALPHA
GL_SRC2_ALPHA = _CorePython.GL_SRC2_ALPHA
GL_BLEND_EQUATION_RGB = _CorePython.GL_BLEND_EQUATION_RGB
GL_VERTEX_ATTRIB_ARRAY_ENABLED = _CorePython.GL_VERTEX_ATTRIB_ARRAY_ENABLED
GL_VERTEX_ATTRIB_ARRAY_SIZE = _CorePython.GL_VERTEX_ATTRIB_ARRAY_SIZE
GL_VERTEX_ATTRIB_ARRAY_STRIDE = _CorePython.GL_VERTEX_ATTRIB_ARRAY_STRIDE
GL_VERTEX_ATTRIB_ARRAY_TYPE = _CorePython.GL_VERTEX_ATTRIB_ARRAY_TYPE
GL_CURRENT_VERTEX_ATTRIB = _CorePython.GL_CURRENT_VERTEX_ATTRIB
GL_VERTEX_PROGRAM_POINT_SIZE = _CorePython.GL_VERTEX_PROGRAM_POINT_SIZE
GL_VERTEX_ATTRIB_ARRAY_POINTER = _CorePython.GL_VERTEX_ATTRIB_ARRAY_POINTER
GL_STENCIL_BACK_FUNC = _CorePython.GL_STENCIL_BACK_FUNC
GL_STENCIL_BACK_FAIL = _CorePython.GL_STENCIL_BACK_FAIL
GL_STENCIL_BACK_PASS_DEPTH_FAIL = _CorePython.GL_STENCIL_BACK_PASS_DEPTH_FAIL
GL_STENCIL_BACK_PASS_DEPTH_PASS = _CorePython.GL_STENCIL_BACK_PASS_DEPTH_PASS
GL_MAX_DRAW_BUFFERS = _CorePython.GL_MAX_DRAW_BUFFERS
GL_DRAW_BUFFER0 = _CorePython.GL_DRAW_BUFFER0
GL_DRAW_BUFFER1 = _CorePython.GL_DRAW_BUFFER1
GL_DRAW_BUFFER2 = _CorePython.GL_DRAW_BUFFER2
GL_DRAW_BUFFER3 = _CorePython.GL_DRAW_BUFFER3
GL_DRAW_BUFFER4 = _CorePython.GL_DRAW_BUFFER4
GL_DRAW_BUFFER5 = _CorePython.GL_DRAW_BUFFER5
GL_DRAW_BUFFER6 = _CorePython.GL_DRAW_BUFFER6
GL_DRAW_BUFFER7 = _CorePython.GL_DRAW_BUFFER7
GL_DRAW_BUFFER8 = _CorePython.GL_DRAW_BUFFER8
GL_DRAW_BUFFER9 = _CorePython.GL_DRAW_BUFFER9
GL_DRAW_BUFFER10 = _CorePython.GL_DRAW_BUFFER10
GL_DRAW_BUFFER11 = _CorePython.GL_DRAW_BUFFER11
GL_DRAW_BUFFER12 = _CorePython.GL_DRAW_BUFFER12
GL_DRAW_BUFFER13 = _CorePython.GL_DRAW_BUFFER13
GL_DRAW_BUFFER14 = _CorePython.GL_DRAW_BUFFER14
GL_DRAW_BUFFER15 = _CorePython.GL_DRAW_BUFFER15
GL_BLEND_EQUATION_ALPHA = _CorePython.GL_BLEND_EQUATION_ALPHA
GL_MAX_VERTEX_ATTRIBS = _CorePython.GL_MAX_VERTEX_ATTRIBS
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = _CorePython.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
GL_MAX_TEXTURE_IMAGE_UNITS = _CorePython.GL_MAX_TEXTURE_IMAGE_UNITS
GL_FRAGMENT_SHADER = _CorePython.GL_FRAGMENT_SHADER
GL_VERTEX_SHADER = _CorePython.GL_VERTEX_SHADER
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = _CorePython.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
GL_MAX_VERTEX_UNIFORM_COMPONENTS = _CorePython.GL_MAX_VERTEX_UNIFORM_COMPONENTS
GL_MAX_VARYING_FLOATS = _CorePython.GL_MAX_VARYING_FLOATS
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = _CorePython.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = _CorePython.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
GL_SHADER_TYPE = _CorePython.GL_SHADER_TYPE
GL_FLOAT_VEC2 = _CorePython.GL_FLOAT_VEC2
GL_FLOAT_VEC3 = _CorePython.GL_FLOAT_VEC3
GL_FLOAT_VEC4 = _CorePython.GL_FLOAT_VEC4
GL_INT_VEC2 = _CorePython.GL_INT_VEC2
GL_INT_VEC3 = _CorePython.GL_INT_VEC3
GL_INT_VEC4 = _CorePython.GL_INT_VEC4
GL_BOOL = _CorePython.GL_BOOL
GL_BOOL_VEC2 = _CorePython.GL_BOOL_VEC2
GL_BOOL_VEC3 = _CorePython.GL_BOOL_VEC3
GL_BOOL_VEC4 = _CorePython.GL_BOOL_VEC4
GL_FLOAT_MAT2 = _CorePython.GL_FLOAT_MAT2
GL_FLOAT_MAT3 = _CorePython.GL_FLOAT_MAT3
GL_FLOAT_MAT4 = _CorePython.GL_FLOAT_MAT4
GL_SAMPLER_1D = _CorePython.GL_SAMPLER_1D
GL_SAMPLER_2D = _CorePython.GL_SAMPLER_2D
GL_SAMPLER_3D = _CorePython.GL_SAMPLER_3D
GL_SAMPLER_CUBE = _CorePython.GL_SAMPLER_CUBE
GL_SAMPLER_1D_SHADOW = _CorePython.GL_SAMPLER_1D_SHADOW
GL_SAMPLER_2D_SHADOW = _CorePython.GL_SAMPLER_2D_SHADOW
GL_DELETE_STATUS = _CorePython.GL_DELETE_STATUS
GL_COMPILE_STATUS = _CorePython.GL_COMPILE_STATUS
GL_LINK_STATUS = _CorePython.GL_LINK_STATUS
GL_VALIDATE_STATUS = _CorePython.GL_VALIDATE_STATUS
GL_INFO_LOG_LENGTH = _CorePython.GL_INFO_LOG_LENGTH
GL_ATTACHED_SHADERS = _CorePython.GL_ATTACHED_SHADERS
GL_ACTIVE_UNIFORMS = _CorePython.GL_ACTIVE_UNIFORMS
GL_ACTIVE_UNIFORM_MAX_LENGTH = _CorePython.GL_ACTIVE_UNIFORM_MAX_LENGTH
GL_SHADER_SOURCE_LENGTH = _CorePython.GL_SHADER_SOURCE_LENGTH
GL_ACTIVE_ATTRIBUTES = _CorePython.GL_ACTIVE_ATTRIBUTES
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = _CorePython.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
GL_FRAGMENT_SHADER_DERIVATIVE_HINT = _CorePython.GL_FRAGMENT_SHADER_DERIVATIVE_HINT
GL_SHADING_LANGUAGE_VERSION = _CorePython.GL_SHADING_LANGUAGE_VERSION
GL_CURRENT_PROGRAM = _CorePython.GL_CURRENT_PROGRAM
GL_POINT_SPRITE_COORD_ORIGIN = _CorePython.GL_POINT_SPRITE_COORD_ORIGIN
GL_LOWER_LEFT = _CorePython.GL_LOWER_LEFT
GL_UPPER_LEFT = _CorePython.GL_UPPER_LEFT
GL_STENCIL_BACK_REF = _CorePython.GL_STENCIL_BACK_REF
GL_STENCIL_BACK_VALUE_MASK = _CorePython.GL_STENCIL_BACK_VALUE_MASK
GL_STENCIL_BACK_WRITEMASK = _CorePython.GL_STENCIL_BACK_WRITEMASK
GL_VERTEX_PROGRAM_TWO_SIDE = _CorePython.GL_VERTEX_PROGRAM_TWO_SIDE
GL_POINT_SPRITE = _CorePython.GL_POINT_SPRITE
GL_COORD_REPLACE = _CorePython.GL_COORD_REPLACE
GL_MAX_TEXTURE_COORDS = _CorePython.GL_MAX_TEXTURE_COORDS
GL_PIXEL_PACK_BUFFER = _CorePython.GL_PIXEL_PACK_BUFFER
GL_PIXEL_UNPACK_BUFFER = _CorePython.GL_PIXEL_UNPACK_BUFFER
GL_PIXEL_PACK_BUFFER_BINDING = _CorePython.GL_PIXEL_PACK_BUFFER_BINDING
GL_PIXEL_UNPACK_BUFFER_BINDING = _CorePython.GL_PIXEL_UNPACK_BUFFER_BINDING
GL_FLOAT_MAT2x3 = _CorePython.GL_FLOAT_MAT2x3
GL_FLOAT_MAT2x4 = _CorePython.GL_FLOAT_MAT2x4
GL_FLOAT_MAT3x2 = _CorePython.GL_FLOAT_MAT3x2
GL_FLOAT_MAT3x4 = _CorePython.GL_FLOAT_MAT3x4
GL_FLOAT_MAT4x2 = _CorePython.GL_FLOAT_MAT4x2
GL_FLOAT_MAT4x3 = _CorePython.GL_FLOAT_MAT4x3
GL_SRGB = _CorePython.GL_SRGB
GL_SRGB8 = _CorePython.GL_SRGB8
GL_SRGB_ALPHA = _CorePython.GL_SRGB_ALPHA
GL_SRGB8_ALPHA8 = _CorePython.GL_SRGB8_ALPHA8
GL_COMPRESSED_SRGB = _CorePython.GL_COMPRESSED_SRGB
GL_COMPRESSED_SRGB_ALPHA = _CorePython.GL_COMPRESSED_SRGB_ALPHA
GL_CURRENT_RASTER_SECONDARY_COLOR = _CorePython.GL_CURRENT_RASTER_SECONDARY_COLOR
GL_SLUMINANCE_ALPHA = _CorePython.GL_SLUMINANCE_ALPHA
GL_SLUMINANCE8_ALPHA8 = _CorePython.GL_SLUMINANCE8_ALPHA8
GL_SLUMINANCE = _CorePython.GL_SLUMINANCE
GL_SLUMINANCE8 = _CorePython.GL_SLUMINANCE8
GL_COMPRESSED_SLUMINANCE = _CorePython.GL_COMPRESSED_SLUMINANCE
GL_COMPRESSED_SLUMINANCE_ALPHA = _CorePython.GL_COMPRESSED_SLUMINANCE_ALPHA
GL_COMPARE_REF_TO_TEXTURE = _CorePython.GL_COMPARE_REF_TO_TEXTURE
GL_CLIP_DISTANCE0 = _CorePython.GL_CLIP_DISTANCE0
GL_CLIP_DISTANCE1 = _CorePython.GL_CLIP_DISTANCE1
GL_CLIP_DISTANCE2 = _CorePython.GL_CLIP_DISTANCE2
GL_CLIP_DISTANCE3 = _CorePython.GL_CLIP_DISTANCE3
GL_CLIP_DISTANCE4 = _CorePython.GL_CLIP_DISTANCE4
GL_CLIP_DISTANCE5 = _CorePython.GL_CLIP_DISTANCE5
GL_CLIP_DISTANCE6 = _CorePython.GL_CLIP_DISTANCE6
GL_CLIP_DISTANCE7 = _CorePython.GL_CLIP_DISTANCE7
GL_MAX_CLIP_DISTANCES = _CorePython.GL_MAX_CLIP_DISTANCES
GL_MAJOR_VERSION = _CorePython.GL_MAJOR_VERSION
GL_MINOR_VERSION = _CorePython.GL_MINOR_VERSION
GL_NUM_EXTENSIONS = _CorePython.GL_NUM_EXTENSIONS
GL_CONTEXT_FLAGS = _CorePython.GL_CONTEXT_FLAGS
GL_COMPRESSED_RED = _CorePython.GL_COMPRESSED_RED
GL_COMPRESSED_RG = _CorePython.GL_COMPRESSED_RG
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = _CorePython.GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
GL_RGBA32F = _CorePython.GL_RGBA32F
GL_RGB32F = _CorePython.GL_RGB32F
GL_RGBA16F = _CorePython.GL_RGBA16F
GL_RGB16F = _CorePython.GL_RGB16F
GL_VERTEX_ATTRIB_ARRAY_INTEGER = _CorePython.GL_VERTEX_ATTRIB_ARRAY_INTEGER
GL_MAX_ARRAY_TEXTURE_LAYERS = _CorePython.GL_MAX_ARRAY_TEXTURE_LAYERS
GL_MIN_PROGRAM_TEXEL_OFFSET = _CorePython.GL_MIN_PROGRAM_TEXEL_OFFSET
GL_MAX_PROGRAM_TEXEL_OFFSET = _CorePython.GL_MAX_PROGRAM_TEXEL_OFFSET
GL_CLAMP_READ_COLOR = _CorePython.GL_CLAMP_READ_COLOR
GL_FIXED_ONLY = _CorePython.GL_FIXED_ONLY
GL_MAX_VARYING_COMPONENTS = _CorePython.GL_MAX_VARYING_COMPONENTS
GL_TEXTURE_1D_ARRAY = _CorePython.GL_TEXTURE_1D_ARRAY
GL_PROXY_TEXTURE_1D_ARRAY = _CorePython.GL_PROXY_TEXTURE_1D_ARRAY
GL_TEXTURE_2D_ARRAY = _CorePython.GL_TEXTURE_2D_ARRAY
GL_PROXY_TEXTURE_2D_ARRAY = _CorePython.GL_PROXY_TEXTURE_2D_ARRAY
GL_TEXTURE_BINDING_1D_ARRAY = _CorePython.GL_TEXTURE_BINDING_1D_ARRAY
GL_TEXTURE_BINDING_2D_ARRAY = _CorePython.GL_TEXTURE_BINDING_2D_ARRAY
GL_R11F_G11F_B10F = _CorePython.GL_R11F_G11F_B10F
GL_UNSIGNED_INT_10F_11F_11F_REV = _CorePython.GL_UNSIGNED_INT_10F_11F_11F_REV
GL_RGB9_E5 = _CorePython.GL_RGB9_E5
GL_UNSIGNED_INT_5_9_9_9_REV = _CorePython.GL_UNSIGNED_INT_5_9_9_9_REV
GL_TEXTURE_SHARED_SIZE = _CorePython.GL_TEXTURE_SHARED_SIZE
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = _CorePython.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
GL_TRANSFORM_FEEDBACK_BUFFER_MODE = _CorePython.GL_TRANSFORM_FEEDBACK_BUFFER_MODE
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = _CorePython.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
GL_TRANSFORM_FEEDBACK_VARYINGS = _CorePython.GL_TRANSFORM_FEEDBACK_VARYINGS
GL_TRANSFORM_FEEDBACK_BUFFER_START = _CorePython.GL_TRANSFORM_FEEDBACK_BUFFER_START
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = _CorePython.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
GL_PRIMITIVES_GENERATED = _CorePython.GL_PRIMITIVES_GENERATED
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = _CorePython.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
GL_RASTERIZER_DISCARD = _CorePython.GL_RASTERIZER_DISCARD
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = _CorePython.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = _CorePython.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
GL_INTERLEAVED_ATTRIBS = _CorePython.GL_INTERLEAVED_ATTRIBS
GL_SEPARATE_ATTRIBS = _CorePython.GL_SEPARATE_ATTRIBS
GL_TRANSFORM_FEEDBACK_BUFFER = _CorePython.GL_TRANSFORM_FEEDBACK_BUFFER
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = _CorePython.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
GL_RGBA32UI = _CorePython.GL_RGBA32UI
GL_RGB32UI = _CorePython.GL_RGB32UI
GL_RGBA16UI = _CorePython.GL_RGBA16UI
GL_RGB16UI = _CorePython.GL_RGB16UI
GL_RGBA8UI = _CorePython.GL_RGBA8UI
GL_RGB8UI = _CorePython.GL_RGB8UI
GL_RGBA32I = _CorePython.GL_RGBA32I
GL_RGB32I = _CorePython.GL_RGB32I
GL_RGBA16I = _CorePython.GL_RGBA16I
GL_RGB16I = _CorePython.GL_RGB16I
GL_RGBA8I = _CorePython.GL_RGBA8I
GL_RGB8I = _CorePython.GL_RGB8I
GL_RED_INTEGER = _CorePython.GL_RED_INTEGER
GL_GREEN_INTEGER = _CorePython.GL_GREEN_INTEGER
GL_BLUE_INTEGER = _CorePython.GL_BLUE_INTEGER
GL_RGB_INTEGER = _CorePython.GL_RGB_INTEGER
GL_RGBA_INTEGER = _CorePython.GL_RGBA_INTEGER
GL_BGR_INTEGER = _CorePython.GL_BGR_INTEGER
GL_BGRA_INTEGER = _CorePython.GL_BGRA_INTEGER
GL_SAMPLER_1D_ARRAY = _CorePython.GL_SAMPLER_1D_ARRAY
GL_SAMPLER_2D_ARRAY = _CorePython.GL_SAMPLER_2D_ARRAY
GL_SAMPLER_1D_ARRAY_SHADOW = _CorePython.GL_SAMPLER_1D_ARRAY_SHADOW
GL_SAMPLER_2D_ARRAY_SHADOW = _CorePython.GL_SAMPLER_2D_ARRAY_SHADOW
GL_SAMPLER_CUBE_SHADOW = _CorePython.GL_SAMPLER_CUBE_SHADOW
GL_UNSIGNED_INT_VEC2 = _CorePython.GL_UNSIGNED_INT_VEC2
GL_UNSIGNED_INT_VEC3 = _CorePython.GL_UNSIGNED_INT_VEC3
GL_UNSIGNED_INT_VEC4 = _CorePython.GL_UNSIGNED_INT_VEC4
GL_INT_SAMPLER_1D = _CorePython.GL_INT_SAMPLER_1D
GL_INT_SAMPLER_2D = _CorePython.GL_INT_SAMPLER_2D
GL_INT_SAMPLER_3D = _CorePython.GL_INT_SAMPLER_3D
GL_INT_SAMPLER_CUBE = _CorePython.GL_INT_SAMPLER_CUBE
GL_INT_SAMPLER_1D_ARRAY = _CorePython.GL_INT_SAMPLER_1D_ARRAY
GL_INT_SAMPLER_2D_ARRAY = _CorePython.GL_INT_SAMPLER_2D_ARRAY
GL_UNSIGNED_INT_SAMPLER_1D = _CorePython.GL_UNSIGNED_INT_SAMPLER_1D
GL_UNSIGNED_INT_SAMPLER_2D = _CorePython.GL_UNSIGNED_INT_SAMPLER_2D
GL_UNSIGNED_INT_SAMPLER_3D = _CorePython.GL_UNSIGNED_INT_SAMPLER_3D
GL_UNSIGNED_INT_SAMPLER_CUBE = _CorePython.GL_UNSIGNED_INT_SAMPLER_CUBE
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = _CorePython.GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = _CorePython.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
GL_QUERY_WAIT = _CorePython.GL_QUERY_WAIT
GL_QUERY_NO_WAIT = _CorePython.GL_QUERY_NO_WAIT
GL_QUERY_BY_REGION_WAIT = _CorePython.GL_QUERY_BY_REGION_WAIT
GL_QUERY_BY_REGION_NO_WAIT = _CorePython.GL_QUERY_BY_REGION_NO_WAIT
GL_BUFFER_ACCESS_FLAGS = _CorePython.GL_BUFFER_ACCESS_FLAGS
GL_BUFFER_MAP_LENGTH = _CorePython.GL_BUFFER_MAP_LENGTH
GL_BUFFER_MAP_OFFSET = _CorePython.GL_BUFFER_MAP_OFFSET
GL_DEPTH_COMPONENT32F = _CorePython.GL_DEPTH_COMPONENT32F
GL_DEPTH32F_STENCIL8 = _CorePython.GL_DEPTH32F_STENCIL8
GL_FLOAT_32_UNSIGNED_INT_24_8_REV = _CorePython.GL_FLOAT_32_UNSIGNED_INT_24_8_REV
GL_INVALID_FRAMEBUFFER_OPERATION = _CorePython.GL_INVALID_FRAMEBUFFER_OPERATION
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
GL_FRAMEBUFFER_DEFAULT = _CorePython.GL_FRAMEBUFFER_DEFAULT
GL_FRAMEBUFFER_UNDEFINED = _CorePython.GL_FRAMEBUFFER_UNDEFINED
GL_DEPTH_STENCIL_ATTACHMENT = _CorePython.GL_DEPTH_STENCIL_ATTACHMENT
GL_MAX_RENDERBUFFER_SIZE = _CorePython.GL_MAX_RENDERBUFFER_SIZE
GL_DEPTH_STENCIL = _CorePython.GL_DEPTH_STENCIL
GL_UNSIGNED_INT_24_8 = _CorePython.GL_UNSIGNED_INT_24_8
GL_DEPTH24_STENCIL8 = _CorePython.GL_DEPTH24_STENCIL8
GL_TEXTURE_STENCIL_SIZE = _CorePython.GL_TEXTURE_STENCIL_SIZE
GL_TEXTURE_RED_TYPE = _CorePython.GL_TEXTURE_RED_TYPE
GL_TEXTURE_GREEN_TYPE = _CorePython.GL_TEXTURE_GREEN_TYPE
GL_TEXTURE_BLUE_TYPE = _CorePython.GL_TEXTURE_BLUE_TYPE
GL_TEXTURE_ALPHA_TYPE = _CorePython.GL_TEXTURE_ALPHA_TYPE
GL_TEXTURE_DEPTH_TYPE = _CorePython.GL_TEXTURE_DEPTH_TYPE
GL_UNSIGNED_NORMALIZED = _CorePython.GL_UNSIGNED_NORMALIZED
GL_FRAMEBUFFER_BINDING = _CorePython.GL_FRAMEBUFFER_BINDING
GL_DRAW_FRAMEBUFFER_BINDING = _CorePython.GL_DRAW_FRAMEBUFFER_BINDING
GL_RENDERBUFFER_BINDING = _CorePython.GL_RENDERBUFFER_BINDING
GL_READ_FRAMEBUFFER = _CorePython.GL_READ_FRAMEBUFFER
GL_DRAW_FRAMEBUFFER = _CorePython.GL_DRAW_FRAMEBUFFER
GL_READ_FRAMEBUFFER_BINDING = _CorePython.GL_READ_FRAMEBUFFER_BINDING
GL_RENDERBUFFER_SAMPLES = _CorePython.GL_RENDERBUFFER_SAMPLES
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
GL_FRAMEBUFFER_COMPLETE = _CorePython.GL_FRAMEBUFFER_COMPLETE
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = _CorePython.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = _CorePython.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = _CorePython.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = _CorePython.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
GL_FRAMEBUFFER_UNSUPPORTED = _CorePython.GL_FRAMEBUFFER_UNSUPPORTED
GL_MAX_COLOR_ATTACHMENTS = _CorePython.GL_MAX_COLOR_ATTACHMENTS
GL_COLOR_ATTACHMENT0 = _CorePython.GL_COLOR_ATTACHMENT0
GL_COLOR_ATTACHMENT1 = _CorePython.GL_COLOR_ATTACHMENT1
GL_COLOR_ATTACHMENT2 = _CorePython.GL_COLOR_ATTACHMENT2
GL_COLOR_ATTACHMENT3 = _CorePython.GL_COLOR_ATTACHMENT3
GL_COLOR_ATTACHMENT4 = _CorePython.GL_COLOR_ATTACHMENT4
GL_COLOR_ATTACHMENT5 = _CorePython.GL_COLOR_ATTACHMENT5
GL_COLOR_ATTACHMENT6 = _CorePython.GL_COLOR_ATTACHMENT6
GL_COLOR_ATTACHMENT7 = _CorePython.GL_COLOR_ATTACHMENT7
GL_COLOR_ATTACHMENT8 = _CorePython.GL_COLOR_ATTACHMENT8
GL_COLOR_ATTACHMENT9 = _CorePython.GL_COLOR_ATTACHMENT9
GL_COLOR_ATTACHMENT10 = _CorePython.GL_COLOR_ATTACHMENT10
GL_COLOR_ATTACHMENT11 = _CorePython.GL_COLOR_ATTACHMENT11
GL_COLOR_ATTACHMENT12 = _CorePython.GL_COLOR_ATTACHMENT12
GL_COLOR_ATTACHMENT13 = _CorePython.GL_COLOR_ATTACHMENT13
GL_COLOR_ATTACHMENT14 = _CorePython.GL_COLOR_ATTACHMENT14
GL_COLOR_ATTACHMENT15 = _CorePython.GL_COLOR_ATTACHMENT15
GL_COLOR_ATTACHMENT16 = _CorePython.GL_COLOR_ATTACHMENT16
GL_COLOR_ATTACHMENT17 = _CorePython.GL_COLOR_ATTACHMENT17
GL_COLOR_ATTACHMENT18 = _CorePython.GL_COLOR_ATTACHMENT18
GL_COLOR_ATTACHMENT19 = _CorePython.GL_COLOR_ATTACHMENT19
GL_COLOR_ATTACHMENT20 = _CorePython.GL_COLOR_ATTACHMENT20
GL_COLOR_ATTACHMENT21 = _CorePython.GL_COLOR_ATTACHMENT21
GL_COLOR_ATTACHMENT22 = _CorePython.GL_COLOR_ATTACHMENT22
GL_COLOR_ATTACHMENT23 = _CorePython.GL_COLOR_ATTACHMENT23
GL_COLOR_ATTACHMENT24 = _CorePython.GL_COLOR_ATTACHMENT24
GL_COLOR_ATTACHMENT25 = _CorePython.GL_COLOR_ATTACHMENT25
GL_COLOR_ATTACHMENT26 = _CorePython.GL_COLOR_ATTACHMENT26
GL_COLOR_ATTACHMENT27 = _CorePython.GL_COLOR_ATTACHMENT27
GL_COLOR_ATTACHMENT28 = _CorePython.GL_COLOR_ATTACHMENT28
GL_COLOR_ATTACHMENT29 = _CorePython.GL_COLOR_ATTACHMENT29
GL_COLOR_ATTACHMENT30 = _CorePython.GL_COLOR_ATTACHMENT30
GL_COLOR_ATTACHMENT31 = _CorePython.GL_COLOR_ATTACHMENT31
GL_DEPTH_ATTACHMENT = _CorePython.GL_DEPTH_ATTACHMENT
GL_STENCIL_ATTACHMENT = _CorePython.GL_STENCIL_ATTACHMENT
GL_FRAMEBUFFER = _CorePython.GL_FRAMEBUFFER
GL_RENDERBUFFER = _CorePython.GL_RENDERBUFFER
GL_RENDERBUFFER_WIDTH = _CorePython.GL_RENDERBUFFER_WIDTH
GL_RENDERBUFFER_HEIGHT = _CorePython.GL_RENDERBUFFER_HEIGHT
GL_RENDERBUFFER_INTERNAL_FORMAT = _CorePython.GL_RENDERBUFFER_INTERNAL_FORMAT
GL_STENCIL_INDEX1 = _CorePython.GL_STENCIL_INDEX1
GL_STENCIL_INDEX4 = _CorePython.GL_STENCIL_INDEX4
GL_STENCIL_INDEX8 = _CorePython.GL_STENCIL_INDEX8
GL_STENCIL_INDEX16 = _CorePython.GL_STENCIL_INDEX16
GL_RENDERBUFFER_RED_SIZE = _CorePython.GL_RENDERBUFFER_RED_SIZE
GL_RENDERBUFFER_GREEN_SIZE = _CorePython.GL_RENDERBUFFER_GREEN_SIZE
GL_RENDERBUFFER_BLUE_SIZE = _CorePython.GL_RENDERBUFFER_BLUE_SIZE
GL_RENDERBUFFER_ALPHA_SIZE = _CorePython.GL_RENDERBUFFER_ALPHA_SIZE
GL_RENDERBUFFER_DEPTH_SIZE = _CorePython.GL_RENDERBUFFER_DEPTH_SIZE
GL_RENDERBUFFER_STENCIL_SIZE = _CorePython.GL_RENDERBUFFER_STENCIL_SIZE
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = _CorePython.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
GL_MAX_SAMPLES = _CorePython.GL_MAX_SAMPLES
GL_INDEX = _CorePython.GL_INDEX
GL_TEXTURE_LUMINANCE_TYPE = _CorePython.GL_TEXTURE_LUMINANCE_TYPE
GL_TEXTURE_INTENSITY_TYPE = _CorePython.GL_TEXTURE_INTENSITY_TYPE
GL_FRAMEBUFFER_SRGB = _CorePython.GL_FRAMEBUFFER_SRGB
GL_HALF_FLOAT = _CorePython.GL_HALF_FLOAT
GL_MAP_READ_BIT = _CorePython.GL_MAP_READ_BIT
GL_MAP_WRITE_BIT = _CorePython.GL_MAP_WRITE_BIT
GL_MAP_INVALIDATE_RANGE_BIT = _CorePython.GL_MAP_INVALIDATE_RANGE_BIT
GL_MAP_INVALIDATE_BUFFER_BIT = _CorePython.GL_MAP_INVALIDATE_BUFFER_BIT
GL_MAP_FLUSH_EXPLICIT_BIT = _CorePython.GL_MAP_FLUSH_EXPLICIT_BIT
GL_MAP_UNSYNCHRONIZED_BIT = _CorePython.GL_MAP_UNSYNCHRONIZED_BIT
GL_COMPRESSED_RED_RGTC1 = _CorePython.GL_COMPRESSED_RED_RGTC1
GL_COMPRESSED_SIGNED_RED_RGTC1 = _CorePython.GL_COMPRESSED_SIGNED_RED_RGTC1
GL_COMPRESSED_RG_RGTC2 = _CorePython.GL_COMPRESSED_RG_RGTC2
GL_COMPRESSED_SIGNED_RG_RGTC2 = _CorePython.GL_COMPRESSED_SIGNED_RG_RGTC2
GL_RG = _CorePython.GL_RG
GL_RG_INTEGER = _CorePython.GL_RG_INTEGER
GL_R8 = _CorePython.GL_R8
GL_R16 = _CorePython.GL_R16
GL_RG8 = _CorePython.GL_RG8
GL_RG16 = _CorePython.GL_RG16
GL_R16F = _CorePython.GL_R16F
GL_R32F = _CorePython.GL_R32F
GL_RG16F = _CorePython.GL_RG16F
GL_RG32F = _CorePython.GL_RG32F
GL_R8I = _CorePython.GL_R8I
GL_R8UI = _CorePython.GL_R8UI
GL_R16I = _CorePython.GL_R16I
GL_R16UI = _CorePython.GL_R16UI
GL_R32I = _CorePython.GL_R32I
GL_R32UI = _CorePython.GL_R32UI
GL_RG8I = _CorePython.GL_RG8I
GL_RG8UI = _CorePython.GL_RG8UI
GL_RG16I = _CorePython.GL_RG16I
GL_RG16UI = _CorePython.GL_RG16UI
GL_RG32I = _CorePython.GL_RG32I
GL_RG32UI = _CorePython.GL_RG32UI
GL_VERTEX_ARRAY_BINDING = _CorePython.GL_VERTEX_ARRAY_BINDING
GL_CLAMP_VERTEX_COLOR = _CorePython.GL_CLAMP_VERTEX_COLOR
GL_CLAMP_FRAGMENT_COLOR = _CorePython.GL_CLAMP_FRAGMENT_COLOR
GL_ALPHA_INTEGER = _CorePython.GL_ALPHA_INTEGER
GL_SAMPLER_2D_RECT = _CorePython.GL_SAMPLER_2D_RECT
GL_SAMPLER_2D_RECT_SHADOW = _CorePython.GL_SAMPLER_2D_RECT_SHADOW
GL_SAMPLER_BUFFER = _CorePython.GL_SAMPLER_BUFFER
GL_INT_SAMPLER_2D_RECT = _CorePython.GL_INT_SAMPLER_2D_RECT
GL_INT_SAMPLER_BUFFER = _CorePython.GL_INT_SAMPLER_BUFFER
GL_UNSIGNED_INT_SAMPLER_2D_RECT = _CorePython.GL_UNSIGNED_INT_SAMPLER_2D_RECT
GL_UNSIGNED_INT_SAMPLER_BUFFER = _CorePython.GL_UNSIGNED_INT_SAMPLER_BUFFER
GL_TEXTURE_BUFFER = _CorePython.GL_TEXTURE_BUFFER
GL_MAX_TEXTURE_BUFFER_SIZE = _CorePython.GL_MAX_TEXTURE_BUFFER_SIZE
GL_TEXTURE_BINDING_BUFFER = _CorePython.GL_TEXTURE_BINDING_BUFFER
GL_TEXTURE_BUFFER_DATA_STORE_BINDING = _CorePython.GL_TEXTURE_BUFFER_DATA_STORE_BINDING
GL_TEXTURE_RECTANGLE = _CorePython.GL_TEXTURE_RECTANGLE
GL_TEXTURE_BINDING_RECTANGLE = _CorePython.GL_TEXTURE_BINDING_RECTANGLE
GL_PROXY_TEXTURE_RECTANGLE = _CorePython.GL_PROXY_TEXTURE_RECTANGLE
GL_MAX_RECTANGLE_TEXTURE_SIZE = _CorePython.GL_MAX_RECTANGLE_TEXTURE_SIZE
GL_R8_SNORM = _CorePython.GL_R8_SNORM
GL_RG8_SNORM = _CorePython.GL_RG8_SNORM
GL_RGB8_SNORM = _CorePython.GL_RGB8_SNORM
GL_RGBA8_SNORM = _CorePython.GL_RGBA8_SNORM
GL_R16_SNORM = _CorePython.GL_R16_SNORM
GL_RG16_SNORM = _CorePython.GL_RG16_SNORM
GL_RGB16_SNORM = _CorePython.GL_RGB16_SNORM
GL_RGBA16_SNORM = _CorePython.GL_RGBA16_SNORM
GL_SIGNED_NORMALIZED = _CorePython.GL_SIGNED_NORMALIZED
GL_PRIMITIVE_RESTART = _CorePython.GL_PRIMITIVE_RESTART
GL_PRIMITIVE_RESTART_INDEX = _CorePython.GL_PRIMITIVE_RESTART_INDEX
GL_COPY_READ_BUFFER = _CorePython.GL_COPY_READ_BUFFER
GL_COPY_WRITE_BUFFER = _CorePython.GL_COPY_WRITE_BUFFER
GL_UNIFORM_BUFFER = _CorePython.GL_UNIFORM_BUFFER
GL_UNIFORM_BUFFER_BINDING = _CorePython.GL_UNIFORM_BUFFER_BINDING
GL_UNIFORM_BUFFER_START = _CorePython.GL_UNIFORM_BUFFER_START
GL_UNIFORM_BUFFER_SIZE = _CorePython.GL_UNIFORM_BUFFER_SIZE
GL_MAX_VERTEX_UNIFORM_BLOCKS = _CorePython.GL_MAX_VERTEX_UNIFORM_BLOCKS
GL_MAX_GEOMETRY_UNIFORM_BLOCKS = _CorePython.GL_MAX_GEOMETRY_UNIFORM_BLOCKS
GL_MAX_FRAGMENT_UNIFORM_BLOCKS = _CorePython.GL_MAX_FRAGMENT_UNIFORM_BLOCKS
GL_MAX_COMBINED_UNIFORM_BLOCKS = _CorePython.GL_MAX_COMBINED_UNIFORM_BLOCKS
GL_MAX_UNIFORM_BUFFER_BINDINGS = _CorePython.GL_MAX_UNIFORM_BUFFER_BINDINGS
GL_MAX_UNIFORM_BLOCK_SIZE = _CorePython.GL_MAX_UNIFORM_BLOCK_SIZE
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = _CorePython.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = _CorePython.GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = _CorePython.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = _CorePython.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = _CorePython.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
GL_ACTIVE_UNIFORM_BLOCKS = _CorePython.GL_ACTIVE_UNIFORM_BLOCKS
GL_UNIFORM_TYPE = _CorePython.GL_UNIFORM_TYPE
GL_UNIFORM_SIZE = _CorePython.GL_UNIFORM_SIZE
GL_UNIFORM_NAME_LENGTH = _CorePython.GL_UNIFORM_NAME_LENGTH
GL_UNIFORM_BLOCK_INDEX = _CorePython.GL_UNIFORM_BLOCK_INDEX
GL_UNIFORM_OFFSET = _CorePython.GL_UNIFORM_OFFSET
GL_UNIFORM_ARRAY_STRIDE = _CorePython.GL_UNIFORM_ARRAY_STRIDE
GL_UNIFORM_MATRIX_STRIDE = _CorePython.GL_UNIFORM_MATRIX_STRIDE
GL_UNIFORM_IS_ROW_MAJOR = _CorePython.GL_UNIFORM_IS_ROW_MAJOR
GL_UNIFORM_BLOCK_BINDING = _CorePython.GL_UNIFORM_BLOCK_BINDING
GL_UNIFORM_BLOCK_DATA_SIZE = _CorePython.GL_UNIFORM_BLOCK_DATA_SIZE
GL_UNIFORM_BLOCK_NAME_LENGTH = _CorePython.GL_UNIFORM_BLOCK_NAME_LENGTH
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = _CorePython.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = _CorePython.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = _CorePython.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = _CorePython.GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = _CorePython.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
GL_INVALID_INDEX = _CorePython.GL_INVALID_INDEX
GL_CONTEXT_CORE_PROFILE_BIT = _CorePython.GL_CONTEXT_CORE_PROFILE_BIT
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = _CorePython.GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
GL_LINES_ADJACENCY = _CorePython.GL_LINES_ADJACENCY
GL_LINE_STRIP_ADJACENCY = _CorePython.GL_LINE_STRIP_ADJACENCY
GL_TRIANGLES_ADJACENCY = _CorePython.GL_TRIANGLES_ADJACENCY
GL_TRIANGLE_STRIP_ADJACENCY = _CorePython.GL_TRIANGLE_STRIP_ADJACENCY
GL_PROGRAM_POINT_SIZE = _CorePython.GL_PROGRAM_POINT_SIZE
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = _CorePython.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
GL_FRAMEBUFFER_ATTACHMENT_LAYERED = _CorePython.GL_FRAMEBUFFER_ATTACHMENT_LAYERED
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = _CorePython.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
GL_GEOMETRY_SHADER = _CorePython.GL_GEOMETRY_SHADER
GL_GEOMETRY_VERTICES_OUT = _CorePython.GL_GEOMETRY_VERTICES_OUT
GL_GEOMETRY_INPUT_TYPE = _CorePython.GL_GEOMETRY_INPUT_TYPE
GL_GEOMETRY_OUTPUT_TYPE = _CorePython.GL_GEOMETRY_OUTPUT_TYPE
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = _CorePython.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
GL_MAX_GEOMETRY_OUTPUT_VERTICES = _CorePython.GL_MAX_GEOMETRY_OUTPUT_VERTICES
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = _CorePython.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
GL_MAX_VERTEX_OUTPUT_COMPONENTS = _CorePython.GL_MAX_VERTEX_OUTPUT_COMPONENTS
GL_MAX_GEOMETRY_INPUT_COMPONENTS = _CorePython.GL_MAX_GEOMETRY_INPUT_COMPONENTS
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = _CorePython.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
GL_MAX_FRAGMENT_INPUT_COMPONENTS = _CorePython.GL_MAX_FRAGMENT_INPUT_COMPONENTS
GL_CONTEXT_PROFILE_MASK = _CorePython.GL_CONTEXT_PROFILE_MASK
GL_DEPTH_CLAMP = _CorePython.GL_DEPTH_CLAMP
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = _CorePython.GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
GL_FIRST_VERTEX_CONVENTION = _CorePython.GL_FIRST_VERTEX_CONVENTION
GL_LAST_VERTEX_CONVENTION = _CorePython.GL_LAST_VERTEX_CONVENTION
GL_PROVOKING_VERTEX = _CorePython.GL_PROVOKING_VERTEX
GL_TEXTURE_CUBE_MAP_SEAMLESS = _CorePython.GL_TEXTURE_CUBE_MAP_SEAMLESS
GL_MAX_SERVER_WAIT_TIMEOUT = _CorePython.GL_MAX_SERVER_WAIT_TIMEOUT
GL_OBJECT_TYPE = _CorePython.GL_OBJECT_TYPE
GL_SYNC_CONDITION = _CorePython.GL_SYNC_CONDITION
GL_SYNC_STATUS = _CorePython.GL_SYNC_STATUS
GL_SYNC_FLAGS = _CorePython.GL_SYNC_FLAGS
GL_SYNC_FENCE = _CorePython.GL_SYNC_FENCE
GL_SYNC_GPU_COMMANDS_COMPLETE = _CorePython.GL_SYNC_GPU_COMMANDS_COMPLETE
GL_UNSIGNALED = _CorePython.GL_UNSIGNALED
GL_SIGNALED = _CorePython.GL_SIGNALED
GL_ALREADY_SIGNALED = _CorePython.GL_ALREADY_SIGNALED
GL_TIMEOUT_EXPIRED = _CorePython.GL_TIMEOUT_EXPIRED
GL_CONDITION_SATISFIED = _CorePython.GL_CONDITION_SATISFIED
GL_WAIT_FAILED = _CorePython.GL_WAIT_FAILED
GL_TIMEOUT_IGNORED = _CorePython.GL_TIMEOUT_IGNORED
GL_SYNC_FLUSH_COMMANDS_BIT = _CorePython.GL_SYNC_FLUSH_COMMANDS_BIT
GL_SAMPLE_POSITION = _CorePython.GL_SAMPLE_POSITION
GL_SAMPLE_MASK = _CorePython.GL_SAMPLE_MASK
GL_SAMPLE_MASK_VALUE = _CorePython.GL_SAMPLE_MASK_VALUE
GL_MAX_SAMPLE_MASK_WORDS = _CorePython.GL_MAX_SAMPLE_MASK_WORDS
GL_TEXTURE_2D_MULTISAMPLE = _CorePython.GL_TEXTURE_2D_MULTISAMPLE
GL_PROXY_TEXTURE_2D_MULTISAMPLE = _CorePython.GL_PROXY_TEXTURE_2D_MULTISAMPLE
GL_TEXTURE_2D_MULTISAMPLE_ARRAY = _CorePython.GL_TEXTURE_2D_MULTISAMPLE_ARRAY
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = _CorePython.GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
GL_TEXTURE_BINDING_2D_MULTISAMPLE = _CorePython.GL_TEXTURE_BINDING_2D_MULTISAMPLE
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = _CorePython.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
GL_TEXTURE_SAMPLES = _CorePython.GL_TEXTURE_SAMPLES
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = _CorePython.GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
GL_SAMPLER_2D_MULTISAMPLE = _CorePython.GL_SAMPLER_2D_MULTISAMPLE
GL_INT_SAMPLER_2D_MULTISAMPLE = _CorePython.GL_INT_SAMPLER_2D_MULTISAMPLE
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = _CorePython.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
GL_SAMPLER_2D_MULTISAMPLE_ARRAY = _CorePython.GL_SAMPLER_2D_MULTISAMPLE_ARRAY
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _CorePython.GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _CorePython.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
GL_MAX_COLOR_TEXTURE_SAMPLES = _CorePython.GL_MAX_COLOR_TEXTURE_SAMPLES
GL_MAX_DEPTH_TEXTURE_SAMPLES = _CorePython.GL_MAX_DEPTH_TEXTURE_SAMPLES
GL_MAX_INTEGER_SAMPLES = _CorePython.GL_MAX_INTEGER_SAMPLES
GL_VERTEX_ATTRIB_ARRAY_DIVISOR = _CorePython.GL_VERTEX_ATTRIB_ARRAY_DIVISOR
GL_SRC1_COLOR = _CorePython.GL_SRC1_COLOR
GL_ONE_MINUS_SRC1_COLOR = _CorePython.GL_ONE_MINUS_SRC1_COLOR
GL_ONE_MINUS_SRC1_ALPHA = _CorePython.GL_ONE_MINUS_SRC1_ALPHA
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = _CorePython.GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
GL_ANY_SAMPLES_PASSED = _CorePython.GL_ANY_SAMPLES_PASSED
GL_SAMPLER_BINDING = _CorePython.GL_SAMPLER_BINDING
GL_RGB10_A2UI = _CorePython.GL_RGB10_A2UI
GL_TEXTURE_SWIZZLE_R = _CorePython.GL_TEXTURE_SWIZZLE_R
GL_TEXTURE_SWIZZLE_G = _CorePython.GL_TEXTURE_SWIZZLE_G
GL_TEXTURE_SWIZZLE_B = _CorePython.GL_TEXTURE_SWIZZLE_B
GL_TEXTURE_SWIZZLE_A = _CorePython.GL_TEXTURE_SWIZZLE_A
GL_TEXTURE_SWIZZLE_RGBA = _CorePython.GL_TEXTURE_SWIZZLE_RGBA
GL_TIME_ELAPSED = _CorePython.GL_TIME_ELAPSED
GL_TIMESTAMP = _CorePython.GL_TIMESTAMP
GL_INT_2_10_10_10_REV = _CorePython.GL_INT_2_10_10_10_REV
GL_VERSION_1_0 = _CorePython.GL_VERSION_1_0
GL_VERSION_1_1 = _CorePython.GL_VERSION_1_1
GL_VERSION_1_2 = _CorePython.GL_VERSION_1_2
GL_VERSION_1_3 = _CorePython.GL_VERSION_1_3
GL_VERSION_1_4 = _CorePython.GL_VERSION_1_4
GL_VERSION_1_5 = _CorePython.GL_VERSION_1_5
GL_VERSION_2_0 = _CorePython.GL_VERSION_2_0
GL_VERSION_2_1 = _CorePython.GL_VERSION_2_1
GL_VERSION_3_0 = _CorePython.GL_VERSION_3_0
GL_VERSION_3_1 = _CorePython.GL_VERSION_3_1
GL_VERSION_3_2 = _CorePython.GL_VERSION_3_2
GL_VERSION_3_3 = _CorePython.GL_VERSION_3_3
class Component(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _CorePython.delete_Component

    def ImguiWindowComponent(self):
        return _CorePython.Component_ImguiWindowComponent(self)
    isEnable = property(_CorePython.Component_isEnable_get, _CorePython.Component_isEnable_set)
    entityID = property(_CorePython.Component_entityID_get, _CorePython.Component_entityID_set)

    @staticmethod
    def GetComponentTypeInfos():
        return _CorePython.Component_GetComponentTypeInfos()

    @staticmethod
    def SetComponentTypeInfos():
        return _CorePython.Component_SetComponentTypeInfos()

    def __init__(self):
        _CorePython.Component_swiginit(self, _CorePython.new_Component())

# Register Component in _CorePython:
_CorePython.Component_swigregister(Component)
cvar = _CorePython.cvar

class EcsComponent_Transform(Component):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    componentTypeID = property(_CorePython.EcsComponent_Transform_componentTypeID_get, _CorePython.EcsComponent_Transform_componentTypeID_set)

    def __init__(self):
        _CorePython.EcsComponent_Transform_swiginit(self, _CorePython.new_EcsComponent_Transform())
    __swig_destroy__ = _CorePython.delete_EcsComponent_Transform

# Register EcsComponent_Transform in _CorePython:
_CorePython.EcsComponent_Transform_swigregister(EcsComponent_Transform)
EcsComponent_Transform.size = _CorePython.cvar.EcsComponent_Transform_size

ComponentNULL = _CorePython.ComponentNULL
EntityNULL = _CorePython.EntityNULL
class Entity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def OnInspector(entityID, scene):
        return _CorePython.Entity_OnInspector(entityID, scene)

    def OnSerialize(self, scene):
        return _CorePython.Entity_OnSerialize(self, scene)

    def OnDeSerialize(self, scene):
        return _CorePython.Entity_OnDeSerialize(self, scene)
    entityName = property(_CorePython.Entity_entityName_get, _CorePython.Entity_entityName_set)

    def SetID(self):
        return _CorePython.Entity_SetID(self)

    def GetID(self):
        return _CorePython.Entity_GetID(self)

    def __init__(self):
        _CorePython.Entity_swiginit(self, _CorePython.new_Entity())
    __swig_destroy__ = _CorePython.delete_Entity
    scene = property(_CorePython.Entity_scene_get, _CorePython.Entity_scene_set)
    entityComponents = property(_CorePython.Entity_entityComponents_get, _CorePython.Entity_entityComponents_set)
    ID = property(_CorePython.Entity_ID_get, _CorePython.Entity_ID_set)

# Register Entity in _CorePython:
_CorePython.Entity_swigregister(Entity)
class Register(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _CorePython.Register_swiginit(self, _CorePython.new_Register())
    __swig_destroy__ = _CorePython.delete_Register
    entities = property(_CorePython.Register_entities_get, _CorePython.Register_entities_set)
    ComponentsData = property(_CorePython.Register_ComponentsData_get, _CorePython.Register_ComponentsData_set)
    systems = property(_CorePython.Register_systems_get, _CorePython.Register_systems_set)
    OnReSizeDataVector = property(_CorePython.Register_OnReSizeDataVector_get, _CorePython.Register_OnReSizeDataVector_set)

# Register Register in _CorePython:
_CorePython.Register_swigregister(Register)
class ComponentsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CorePython.ComponentsData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CorePython.ComponentsData___nonzero__(self)

    def __bool__(self):
        return _CorePython.ComponentsData___bool__(self)

    def __len__(self):
        return _CorePython.ComponentsData___len__(self)

    def __getslice__(self, i, j):
        return _CorePython.ComponentsData___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CorePython.ComponentsData___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CorePython.ComponentsData___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CorePython.ComponentsData___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CorePython.ComponentsData___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CorePython.ComponentsData___setitem__(self, *args)

    def pop(self):
        return _CorePython.ComponentsData_pop(self)

    def append(self, x):
        return _CorePython.ComponentsData_append(self, x)

    def empty(self):
        return _CorePython.ComponentsData_empty(self)

    def size(self):
        return _CorePython.ComponentsData_size(self)

    def swap(self, v):
        return _CorePython.ComponentsData_swap(self, v)

    def begin(self):
        return _CorePython.ComponentsData_begin(self)

    def end(self):
        return _CorePython.ComponentsData_end(self)

    def rbegin(self):
        return _CorePython.ComponentsData_rbegin(self)

    def rend(self):
        return _CorePython.ComponentsData_rend(self)

    def clear(self):
        return _CorePython.ComponentsData_clear(self)

    def get_allocator(self):
        return _CorePython.ComponentsData_get_allocator(self)

    def pop_back(self):
        return _CorePython.ComponentsData_pop_back(self)

    def erase(self, *args):
        return _CorePython.ComponentsData_erase(self, *args)

    def __init__(self, *args):
        _CorePython.ComponentsData_swiginit(self, _CorePython.new_ComponentsData(*args))

    def push_back(self, x):
        return _CorePython.ComponentsData_push_back(self, x)

    def front(self):
        return _CorePython.ComponentsData_front(self)

    def back(self):
        return _CorePython.ComponentsData_back(self)

    def assign(self, n, x):
        return _CorePython.ComponentsData_assign(self, n, x)

    def resize(self, *args):
        return _CorePython.ComponentsData_resize(self, *args)

    def insert(self, *args):
        return _CorePython.ComponentsData_insert(self, *args)

    def reserve(self, n):
        return _CorePython.ComponentsData_reserve(self, n)

    def capacity(self):
        return _CorePython.ComponentsData_capacity(self)
    __swig_destroy__ = _CorePython.delete_ComponentsData

# Register ComponentsData in _CorePython:
_CorePython.ComponentsData_swigregister(ComponentsData)
class entities(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CorePython.entities_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CorePython.entities___nonzero__(self)

    def __bool__(self):
        return _CorePython.entities___bool__(self)

    def __len__(self):
        return _CorePython.entities___len__(self)

    def __getslice__(self, i, j):
        return _CorePython.entities___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CorePython.entities___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CorePython.entities___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CorePython.entities___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CorePython.entities___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CorePython.entities___setitem__(self, *args)

    def pop(self):
        return _CorePython.entities_pop(self)

    def append(self, x):
        return _CorePython.entities_append(self, x)

    def empty(self):
        return _CorePython.entities_empty(self)

    def size(self):
        return _CorePython.entities_size(self)

    def swap(self, v):
        return _CorePython.entities_swap(self, v)

    def begin(self):
        return _CorePython.entities_begin(self)

    def end(self):
        return _CorePython.entities_end(self)

    def rbegin(self):
        return _CorePython.entities_rbegin(self)

    def rend(self):
        return _CorePython.entities_rend(self)

    def clear(self):
        return _CorePython.entities_clear(self)

    def get_allocator(self):
        return _CorePython.entities_get_allocator(self)

    def pop_back(self):
        return _CorePython.entities_pop_back(self)

    def erase(self, *args):
        return _CorePython.entities_erase(self, *args)

    def __init__(self, *args):
        _CorePython.entities_swiginit(self, _CorePython.new_entities(*args))

    def push_back(self, x):
        return _CorePython.entities_push_back(self, x)

    def front(self):
        return _CorePython.entities_front(self)

    def back(self):
        return _CorePython.entities_back(self)

    def assign(self, n, x):
        return _CorePython.entities_assign(self, n, x)

    def resize(self, *args):
        return _CorePython.entities_resize(self, *args)

    def insert(self, *args):
        return _CorePython.entities_insert(self, *args)

    def reserve(self, n):
        return _CorePython.entities_reserve(self, n)

    def capacity(self):
        return _CorePython.entities_capacity(self)
    __swig_destroy__ = _CorePython.delete_entities

# Register entities in _CorePython:
_CorePython.entities_swigregister(entities)
class systems(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CorePython.systems_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CorePython.systems___nonzero__(self)

    def __bool__(self):
        return _CorePython.systems___bool__(self)

    def __len__(self):
        return _CorePython.systems___len__(self)

    def __getslice__(self, i, j):
        return _CorePython.systems___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CorePython.systems___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CorePython.systems___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CorePython.systems___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CorePython.systems___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CorePython.systems___setitem__(self, *args)

    def pop(self):
        return _CorePython.systems_pop(self)

    def append(self, x):
        return _CorePython.systems_append(self, x)

    def empty(self):
        return _CorePython.systems_empty(self)

    def size(self):
        return _CorePython.systems_size(self)

    def swap(self, v):
        return _CorePython.systems_swap(self, v)

    def begin(self):
        return _CorePython.systems_begin(self)

    def end(self):
        return _CorePython.systems_end(self)

    def rbegin(self):
        return _CorePython.systems_rbegin(self)

    def rend(self):
        return _CorePython.systems_rend(self)

    def clear(self):
        return _CorePython.systems_clear(self)

    def get_allocator(self):
        return _CorePython.systems_get_allocator(self)

    def pop_back(self):
        return _CorePython.systems_pop_back(self)

    def erase(self, *args):
        return _CorePython.systems_erase(self, *args)

    def __init__(self, *args):
        _CorePython.systems_swiginit(self, _CorePython.new_systems(*args))

    def push_back(self, x):
        return _CorePython.systems_push_back(self, x)

    def front(self):
        return _CorePython.systems_front(self)

    def back(self):
        return _CorePython.systems_back(self)

    def assign(self, n, x):
        return _CorePython.systems_assign(self, n, x)

    def resize(self, *args):
        return _CorePython.systems_resize(self, *args)

    def insert(self, *args):
        return _CorePython.systems_insert(self, *args)

    def reserve(self, n):
        return _CorePython.systems_reserve(self, n)

    def capacity(self):
        return _CorePython.systems_capacity(self)
    __swig_destroy__ = _CorePython.delete_systems

# Register systems in _CorePython:
_CorePython.systems_swigregister(systems)
class MeshData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertexPos = property(_CorePython.MeshData_vertexPos_get, _CorePython.MeshData_vertexPos_set)
    vertexNormal = property(_CorePython.MeshData_vertexNormal_get, _CorePython.MeshData_vertexNormal_set)
    vertexUv = property(_CorePython.MeshData_vertexUv_get, _CorePython.MeshData_vertexUv_set)
    indexVector = property(_CorePython.MeshData_indexVector_get, _CorePython.MeshData_indexVector_set)

    def __init__(self):
        _CorePython.MeshData_swiginit(self, _CorePython.new_MeshData())
    __swig_destroy__ = _CorePython.delete_MeshData

# Register MeshData in _CorePython:
_CorePython.MeshData_swigregister(MeshData)
class Mesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Draw(self):
        return _CorePython.Mesh_Draw(self)
    __swig_destroy__ = _CorePython.delete_Mesh

    def __init__(self, *args):
        _CorePython.Mesh_swiginit(self, _CorePython.new_Mesh(*args))
    VAO = property(_CorePython.Mesh_VAO_get, _CorePython.Mesh_VAO_set)
    VBO = property(_CorePython.Mesh_VBO_get, _CorePython.Mesh_VBO_set)
    vertexVector = property(_CorePython.Mesh_vertexVector_get, _CorePython.Mesh_vertexVector_set)
    indexVector = property(_CorePython.Mesh_indexVector_get, _CorePython.Mesh_indexVector_set)

    def Init(self):
        return _CorePython.Mesh_Init(self)

# Register Mesh in _CorePython:
_CorePython.Mesh_swigregister(Mesh)
class Texture(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Init(self):
        return _CorePython.Texture_Init(self)

    def BindTexture(self):
        return _CorePython.Texture_BindTexture(self)

    def UnBindTexture(self):
        return _CorePython.Texture_UnBindTexture(self)

    def TextureShaderUniform(self, shader, uniform, unit):
        return _CorePython.Texture_TextureShaderUniform(self, shader, uniform, unit)
    ID = property(_CorePython.Texture_ID_get, _CorePython.Texture_ID_set)

    def __init__(self, *args):
        _CorePython.Texture_swiginit(self, _CorePython.new_Texture(*args))
    __swig_destroy__ = _CorePython.delete_Texture

    @staticmethod
    def GetFormat(nbrOfChannel):
        return _CorePython.Texture_GetFormat(nbrOfChannel)

# Register Texture in _CorePython:
_CorePython.Texture_swigregister(Texture)
class Scene(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Init(self):
        return _CorePython.Scene_Init(self)

    def Awake(self):
        return _CorePython.Scene_Awake(self)

    def Start(self):
        return _CorePython.Scene_Start(self)

    def DrawGizmo(self):
        return _CorePython.Scene_DrawGizmo(self)

    def FixedUpdate(self):
        return _CorePython.Scene_FixedUpdate(self)

    def Update(self):
        return _CorePython.Scene_Update(self)

    def LateUpdate(self):
        return _CorePython.Scene_LateUpdate(self)

    def Render(self, shader):
        return _CorePython.Scene_Render(self, shader)

    def RenderScene(self, shader):
        return _CorePython.Scene_RenderScene(self, shader)

    def CreateEntity(self):
        return _CorePython.Scene_CreateEntity(self)

    def GetEntities(self, ID):
        return _CorePython.Scene_GetEntities(self, ID)

    def AddComponent(self, componentTypeID, entity):
        return _CorePython.Scene_AddComponent(self, componentTypeID, entity)

    def HasComponent(self, componentTypeID, entity):
        return _CorePython.Scene_HasComponent(self, componentTypeID, entity)

    def RemoveEntity(self, entity):
        return _CorePython.Scene_RemoveEntity(self, entity)

    def AddSystem(self, system):
        return _CorePython.Scene_AddSystem(self, system)

    def GetComponentDataArray(self, *args):
        return _CorePython.Scene_GetComponentDataArray(self, *args)
    sceneName = property(_CorePython.Scene_sceneName_get, _CorePython.Scene_sceneName_set)
    io = property(_CorePython.Scene_io_get, _CorePython.Scene_io_set)
    deltatime = property(_CorePython.Scene_deltatime_get, _CorePython.Scene_deltatime_set)
    currentProject = property(_CorePython.Scene_currentProject_get, _CorePython.Scene_currentProject_set)
    renderer = property(_CorePython.Scene_renderer_get, _CorePython.Scene_renderer_set)

    def __init__(self, name):
        _CorePython.Scene_swiginit(self, _CorePython.new_Scene(name))
    __swig_destroy__ = _CorePython.delete_Scene

# Register Scene in _CorePython:
_CorePython.Scene_swigregister(Scene)
class IEcsSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Init(self, scene):
        return _CorePython.IEcsSystem_Init(self, scene)

    def Awake(self, scene):
        return _CorePython.IEcsSystem_Awake(self, scene)

    def Start(self, scene):
        return _CorePython.IEcsSystem_Start(self, scene)

    def OnDrawGizmo(self, scene):
        return _CorePython.IEcsSystem_OnDrawGizmo(self, scene)

    def FixedUpdate(self, scene):
        return _CorePython.IEcsSystem_FixedUpdate(self, scene)

    def Update(self, scene):
        return _CorePython.IEcsSystem_Update(self, scene)

    def LateUpdate(self, scene):
        return _CorePython.IEcsSystem_LateUpdate(self, scene)

    def Render(self, shader, scene):
        return _CorePython.IEcsSystem_Render(self, shader, scene)

    def OnResizeData(self, ComponentTypeID, data):
        return _CorePython.IEcsSystem_OnResizeData(self, ComponentTypeID, data)
    __swig_destroy__ = _CorePython.delete_IEcsSystem

# Register IEcsSystem in _CorePython:
_CorePython.IEcsSystem_swigregister(IEcsSystem)
class PythonScript(IEcsSystem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Init(self, scene):
        return _CorePython.PythonScript_Init(self, scene)

    def Awake(self, scene):
        return _CorePython.PythonScript_Awake(self, scene)

    def Start(self, scene):
        return _CorePython.PythonScript_Start(self, scene)

    def OnDrawGizmo(self, scene):
        return _CorePython.PythonScript_OnDrawGizmo(self, scene)

    def FixedUpdate(self, scene):
        return _CorePython.PythonScript_FixedUpdate(self, scene)

    def Update(self, scene):
        return _CorePython.PythonScript_Update(self, scene)

    def LateUpdate(self, scene):
        return _CorePython.PythonScript_LateUpdate(self, scene)

    def Render(self, shader, scene):
        return _CorePython.PythonScript_Render(self, shader, scene)

    def OnResizeData(self, ComponentTypeID, data):
        return _CorePython.PythonScript_OnResizeData(self, ComponentTypeID, data)

    def __init__(self, FilePath):
        _CorePython.PythonScript_swiginit(self, _CorePython.new_PythonScript(FilePath))
    __swig_destroy__ = _CorePython.delete_PythonScript

# Register PythonScript in _CorePython:
_CorePython.PythonScript_swigregister(PythonScript)
class GraphScene(IEcsSystem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Init(self, scene):
        return _CorePython.GraphScene_Init(self, scene)

    def Awake(self, scene):
        return _CorePython.GraphScene_Awake(self, scene)

    def Start(self, scene):
        return _CorePython.GraphScene_Start(self, scene)

    def OnDrawGizmo(self, scene):
        return _CorePython.GraphScene_OnDrawGizmo(self, scene)

    def FixedUpdate(self, scene):
        return _CorePython.GraphScene_FixedUpdate(self, scene)

    def Update(self, scene):
        return _CorePython.GraphScene_Update(self, scene)

    def LateUpdate(self, scene):
        return _CorePython.GraphScene_LateUpdate(self, scene)

    def Render(self, shader, scene):
        return _CorePython.GraphScene_Render(self, shader, scene)

    def OnResizeData(self, ComponentTypeID, data):
        return _CorePython.GraphScene_OnResizeData(self, ComponentTypeID, data)

    @staticmethod
    def BeChildOf(Parent, Child):
        return _CorePython.GraphScene_BeChildOf(Parent, Child)

    @staticmethod
    def NoParent(transform):
        return _CorePython.GraphScene_NoParent(transform)

    @staticmethod
    def UnChild(Parent, Child):
        return _CorePython.GraphScene_UnChild(Parent, Child)

    @staticmethod
    def GetParentLink(transform, currentValue):
        return _CorePython.GraphScene_GetParentLink(transform, currentValue)

    @staticmethod
    def CountParentLink(transform):
        return _CorePython.GraphScene_CountParentLink(transform)

    def __init__(self):
        _CorePython.GraphScene_swiginit(self, _CorePython.new_GraphScene())
    __swig_destroy__ = _CorePython.delete_GraphScene

# Register GraphScene in _CorePython:
_CorePython.GraphScene_swigregister(GraphScene)
class Transform(EcsComponent_Transform):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_CorePython.Transform_pos_get, _CorePython.Transform_pos_set)
    scaling = property(_CorePython.Transform_scaling_get, _CorePython.Transform_scaling_set)
    rotationValue = property(_CorePython.Transform_rotationValue_get, _CorePython.Transform_rotationValue_set)
    local = property(_CorePython.Transform_local_get, _CorePython.Transform_local_set)
    world = property(_CorePython.Transform_world_get, _CorePython.Transform_world_set)

    def SetRotation(self, *args):
        return _CorePython.Transform_SetRotation(self, *args)

    def GetRotation(self):
        return _CorePython.Transform_GetRotation(self)
    parentID = property(_CorePython.Transform_parentID_get, _CorePython.Transform_parentID_set)
    parent = property(_CorePython.Transform_parent_get, _CorePython.Transform_parent_set)
    childs = property(_CorePython.Transform_childs_get, _CorePython.Transform_childs_set)

    def __init__(self):
        _CorePython.Transform_swiginit(self, _CorePython.new_Transform())
    __swig_destroy__ = _CorePython.delete_Transform

# Register Transform in _CorePython:
_CorePython.Transform_swigregister(Transform)
class Vector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_CorePython.Vector2_x_get, _CorePython.Vector2_x_set)
    y = property(_CorePython.Vector2_y_get, _CorePython.Vector2_y_set)

    @staticmethod
    def Size():
        return _CorePython.Vector2_Size()

    def Norm(self):
        return _CorePython.Vector2_Norm(self)

    def Normalize(self):
        return _CorePython.Vector2_Normalize(self)

    @staticmethod
    def DotProduct(vec1, Row1):
        return _CorePython.Vector2_DotProduct(vec1, Row1)

    def Normal(self):
        return _CorePython.Vector2_Normal(self)

    def Angle(self, *args):
        return _CorePython.Vector2_Angle(self, *args)

    @staticmethod
    def Determinant(vec1, vec2):
        return _CorePython.Vector2_Determinant(vec1, vec2)

    @staticmethod
    def CrossProduct(vec1, vec2):
        return _CorePython.Vector2_CrossProduct(vec1, vec2)

    @staticmethod
    def DistanceSquare(a, b):
        return _CorePython.Vector2_DistanceSquare(a, b)

    @staticmethod
    def Distance(a, b):
        return _CorePython.Vector2_Distance(a, b)

    def SetPtr(self):
        return _CorePython.Vector2_SetPtr(self)

    def GetPtr(self):
        return _CorePython.Vector2_GetPtr(self)

    @staticmethod
    def Zero():
        return _CorePython.Vector2_Zero()

    @staticmethod
    def One():
        return _CorePython.Vector2_One()

    @staticmethod
    def Right():
        return _CorePython.Vector2_Right()

    @staticmethod
    def Left():
        return _CorePython.Vector2_Left()

    @staticmethod
    def Up():
        return _CorePython.Vector2_Up()

    @staticmethod
    def Down():
        return _CorePython.Vector2_Down()

    def __init__(self, *args):
        _CorePython.Vector2_swiginit(self, _CorePython.new_Vector2(*args))

    def __add__(self, *args):
        return _CorePython.Vector2___add__(self, *args)

    def __mul__(self, *args):
        return _CorePython.Vector2___mul__(self, *args)

    def __truediv__(self, *args):
        return _CorePython.Vector2___truediv__(self, *args)
    __div__ = __truediv__



    def __sub__(self, *args):
        return _CorePython.Vector2___sub__(self, *args)

    def __iadd__(self, Row1):
        return _CorePython.Vector2___iadd__(self, Row1)

    def __isub__(self, Row1):
        return _CorePython.Vector2___isub__(self, Row1)

    def __imul__(self, Row1):
        return _CorePython.Vector2___imul__(self, Row1)

    def __itruediv__(self, *args):
        return _CorePython.Vector2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __ne__(self, vec2):
        return _CorePython.Vector2___ne__(self, vec2)

    def __eq__(self, vec2):
        return _CorePython.Vector2___eq__(self, vec2)

    def __le__(self, vec2):
        return _CorePython.Vector2___le__(self, vec2)

    def __ge__(self, vec2):
        return _CorePython.Vector2___ge__(self, vec2)

    def __getitem__(self, index):
        return _CorePython.Vector2___getitem__(self, index)

    def __setitem__(self, index, value):
        return _CorePython.Vector2___setitem__(self, index, value)
    __swig_destroy__ = _CorePython.delete_Vector2

# Register Vector2 in _CorePython:
_CorePython.Vector2_swigregister(Vector2)
class Vector3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_CorePython.Vector3_x_get, _CorePython.Vector3_x_set)
    y = property(_CorePython.Vector3_y_get, _CorePython.Vector3_y_set)
    z = property(_CorePython.Vector3_z_get, _CorePython.Vector3_z_set)

    @staticmethod
    def Size():
        return _CorePython.Vector3_Size()

    def Norm(self):
        return _CorePython.Vector3_Norm(self)

    def Normalize(self):
        return _CorePython.Vector3_Normalize(self)

    def FNorm(self):
        return _CorePython.Vector3_FNorm(self)

    def FNormalize(self):
        return _CorePython.Vector3_FNormalize(self)

    @staticmethod
    def Reflect(Vector, Normal):
        return _CorePython.Vector3_Reflect(Vector, Normal)

    @staticmethod
    def DotProduct(vec1, vec2):
        return _CorePython.Vector3_DotProduct(vec1, vec2)

    @staticmethod
    def CrossProduct(vec1, vec2):
        return _CorePython.Vector3_CrossProduct(vec1, vec2)

    @staticmethod
    def Angle(vec1, Row1):
        return _CorePython.Vector3_Angle(vec1, Row1)

    @staticmethod
    def DistanceSquare(a, b):
        return _CorePython.Vector3_DistanceSquare(a, b)

    @staticmethod
    def Distance(a, b):
        return _CorePython.Vector3_Distance(a, b)

    @staticmethod
    def scale(v, desiredLength):
        return _CorePython.Vector3_scale(v, desiredLength)

    def SetPtr(self):
        return _CorePython.Vector3_SetPtr(self)

    def GetPtr(self):
        return _CorePython.Vector3_GetPtr(self)

    def MakePositivEuleur(self):
        return _CorePython.Vector3_MakePositivEuleur(self)

    @staticmethod
    def Zero():
        return _CorePython.Vector3_Zero()

    @staticmethod
    def One():
        return _CorePython.Vector3_One()

    @staticmethod
    def Right():
        return _CorePython.Vector3_Right()

    @staticmethod
    def Left():
        return _CorePython.Vector3_Left()

    @staticmethod
    def Up():
        return _CorePython.Vector3_Up()

    @staticmethod
    def Down():
        return _CorePython.Vector3_Down()

    @staticmethod
    def Forward():
        return _CorePython.Vector3_Forward()

    @staticmethod
    def BackForward():
        return _CorePython.Vector3_BackForward()

    def __init__(self, *args):
        _CorePython.Vector3_swiginit(self, _CorePython.new_Vector3(*args))

    def __neg__(self):
        return _CorePython.Vector3___neg__(self)

    def __mul__(self, *args):
        return _CorePython.Vector3___mul__(self, *args)

    def __truediv__(self, *args):
        return _CorePython.Vector3___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, Row1):
        return _CorePython.Vector3___iadd__(self, Row1)

    def __isub__(self, Row1):
        return _CorePython.Vector3___isub__(self, Row1)

    def __itruediv__(self, *args):
        return _CorePython.Vector3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, *args):
        return _CorePython.Vector3___add__(self, *args)

    def __sub__(self, *args):
        return _CorePython.Vector3___sub__(self, *args)

    def __imul__(self, *args):
        return _CorePython.Vector3___imul__(self, *args)

    def __getitem__(self, index):
        return _CorePython.Vector3___getitem__(self, index)

    def __setitem__(self, index, value):
        return _CorePython.Vector3___setitem__(self, index, value)
    __swig_destroy__ = _CorePython.delete_Vector3

# Register Vector3 in _CorePython:
_CorePython.Vector3_swigregister(Vector3)
class Vector4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_CorePython.Vector4_x_get, _CorePython.Vector4_x_set)
    y = property(_CorePython.Vector4_y_get, _CorePython.Vector4_y_set)
    z = property(_CorePython.Vector4_z_get, _CorePython.Vector4_z_set)
    w = property(_CorePython.Vector4_w_get, _CorePython.Vector4_w_set)

    @staticmethod
    def Size():
        return _CorePython.Vector4_Size()

    def Norm(self):
        return _CorePython.Vector4_Norm(self)

    def Normalize(self):
        return _CorePython.Vector4_Normalize(self)

    @staticmethod
    def DotProduct(vec1, vec2):
        return _CorePython.Vector4_DotProduct(vec1, vec2)

    @staticmethod
    def Angle(vec1, vec2):
        return _CorePython.Vector4_Angle(vec1, vec2)

    def __add__(self, *args):
        return _CorePython.Vector4___add__(self, *args)

    def __sub__(self, *args):
        return _CorePython.Vector4___sub__(self, *args)

    def __mul__(self, *args):
        return _CorePython.Vector4___mul__(self, *args)

    def __truediv__(self, *args):
        return _CorePython.Vector4___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, value):
        return _CorePython.Vector4___iadd__(self, value)

    def __isub__(self, value):
        return _CorePython.Vector4___isub__(self, value)

    def __imul__(self, value):
        return _CorePython.Vector4___imul__(self, value)

    def __itruediv__(self, *args):
        return _CorePython.Vector4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __neg__(self):
        return _CorePython.Vector4___neg__(self)

    @staticmethod
    def DistanceSquare(a, b):
        return _CorePython.Vector4_DistanceSquare(a, b)

    @staticmethod
    def Distance(a, b):
        return _CorePython.Vector4_Distance(a, b)

    def GetPtr(self):
        return _CorePython.Vector4_GetPtr(self)

    def SetPtr(self):
        return _CorePython.Vector4_SetPtr(self)

    @staticmethod
    def Zero():
        return _CorePython.Vector4_Zero()

    @staticmethod
    def One():
        return _CorePython.Vector4_One()

    def __init__(self, *args):
        _CorePython.Vector4_swiginit(self, _CorePython.new_Vector4(*args))

    def __getitem__(self, index):
        return _CorePython.Vector4___getitem__(self, index)

    def __setitem__(self, index, value):
        return _CorePython.Vector4___setitem__(self, index, value)
    __swig_destroy__ = _CorePython.delete_Vector4

# Register Vector4 in _CorePython:
_CorePython.Vector4_swigregister(Vector4)
class Matrix2X2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Coloms = property(_CorePython.Matrix2X2_Coloms_get, _CorePython.Matrix2X2_Coloms_set)

    @staticmethod
    def Determinant(matrix):
        return _CorePython.Matrix2X2_Determinant(matrix)

    @staticmethod
    def Size():
        return _CorePython.Matrix2X2_Size()

    @staticmethod
    def RotationMatrix2X2(angle):
        return _CorePython.Matrix2X2_RotationMatrix2X2(angle)

    def GetPtr(self):
        return _CorePython.Matrix2X2_GetPtr(self)

    def SetPtr(self):
        return _CorePython.Matrix2X2_SetPtr(self)

    def __init__(self, *args):
        _CorePython.Matrix2X2_swiginit(self, _CorePython.new_Matrix2X2(*args))

    @staticmethod
    def Identity():
        return _CorePython.Matrix2X2_Identity()
    __swig_destroy__ = _CorePython.delete_Matrix2X2

# Register Matrix2X2 in _CorePython:
_CorePython.Matrix2X2_swigregister(Matrix2X2)
class Matrix3X3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Coloms = property(_CorePython.Matrix3X3_Coloms_get, _CorePython.Matrix3X3_Coloms_set)

    @staticmethod
    def Identity():
        return _CorePython.Matrix3X3_Identity()

    @staticmethod
    def TranslationMatrix3X3(translation):
        return _CorePython.Matrix3X3_TranslationMatrix3X3(translation)

    @staticmethod
    def Rotation2DMatrix3X3(angle):
        return _CorePython.Matrix3X3_Rotation2DMatrix3X3(angle)

    def Invert(self):
        return _CorePython.Matrix3X3_Invert(self)

    def Transposate(self):
        return _CorePython.Matrix3X3_Transposate(self)

    @staticmethod
    def Determinant(matrix):
        return _CorePython.Matrix3X3_Determinant(matrix)

    @staticmethod
    def AdjoinMatrix(matrix):
        return _CorePython.Matrix3X3_AdjoinMatrix(matrix)

    def GetPtr(self):
        return _CorePython.Matrix3X3_GetPtr(self)

    def SetPtr(self):
        return _CorePython.Matrix3X3_SetPtr(self)

    def __init__(self, *args):
        _CorePython.Matrix3X3_swiginit(self, _CorePython.new_Matrix3X3(*args))

    def __mul__(self, *args):
        return _CorePython.Matrix3X3___mul__(self, *args)
    __swig_destroy__ = _CorePython.delete_Matrix3X3

# Register Matrix3X3 in _CorePython:
_CorePython.Matrix3X3_swigregister(Matrix3X3)
class Matrix4X4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Colums = property(_CorePython.Matrix4X4_Colums_get, _CorePython.Matrix4X4_Colums_set)

    def GetPos(self):
        return _CorePython.Matrix4X4_GetPos(self)

    @staticmethod
    def PerspectiveMatrix(fov, aspect, Near, Far):
        return _CorePython.Matrix4X4_PerspectiveMatrix(fov, aspect, Near, Far)

    @staticmethod
    def OrthoGraphicMatrix(left, right, bottom, top, zNear, zFar):
        return _CorePython.Matrix4X4_OrthoGraphicMatrix(left, right, bottom, top, zNear, zFar)

    @staticmethod
    def DecomposeMatrix(matrix, tranlation, rotation, scale):
        return _CorePython.Matrix4X4_DecomposeMatrix(matrix, tranlation, rotation, scale)

    @staticmethod
    def LookAt(eye, at, up):
        return _CorePython.Matrix4X4_LookAt(eye, at, up)

    @staticmethod
    def RotationZ4X4(angle):
        return _CorePython.Matrix4X4_RotationZ4X4(angle)

    @staticmethod
    def RotationY4X4(angle):
        return _CorePython.Matrix4X4_RotationY4X4(angle)

    @staticmethod
    def RotationX4X4(angle):
        return _CorePython.Matrix4X4_RotationX4X4(angle)

    @staticmethod
    def RotationMatrix4X4(angle):
        return _CorePython.Matrix4X4_RotationMatrix4X4(angle)

    @staticmethod
    def TranslateMatrix4X4(translation):
        return _CorePython.Matrix4X4_TranslateMatrix4X4(translation)

    @staticmethod
    def ScalingMatrix4X4(ScalingFactor):
        return _CorePython.Matrix4X4_ScalingMatrix4X4(ScalingFactor)

    @staticmethod
    def TRS(*args):
        return _CorePython.Matrix4X4_TRS(*args)

    @staticmethod
    def Identity():
        return _CorePython.Matrix4X4_Identity()

    def Invert(self):
        return _CorePython.Matrix4X4_Invert(self)

    def Transposate(self):
        return _CorePython.Matrix4X4_Transposate(self)

    @staticmethod
    def Determinant(matrix):
        return _CorePython.Matrix4X4_Determinant(matrix)

    def GetPtr(self):
        return _CorePython.Matrix4X4_GetPtr(self)

    def SetPtr(self):
        return _CorePython.Matrix4X4_SetPtr(self)

    @staticmethod
    def AdjoinMatrix(matrix):
        return _CorePython.Matrix4X4_AdjoinMatrix(matrix)

    def __mul__(self, *args):
        return _CorePython.Matrix4X4___mul__(self, *args)

    def __init__(self, *args):
        _CorePython.Matrix4X4_swiginit(self, _CorePython.new_Matrix4X4(*args))
    __swig_destroy__ = _CorePython.delete_Matrix4X4

# Register Matrix4X4 in _CorePython:
_CorePython.Matrix4X4_swigregister(Matrix4X4)
class Camera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetLookMatrix(self):
        return _CorePython.Camera_GetLookMatrix(self)

    def GetProjectionMatrix(self):
        return _CorePython.Camera_GetProjectionMatrix(self)

    def ImguiCameraWindow(self):
        return _CorePython.Camera_ImguiCameraWindow(self)

    def CameraUpdate(self):
        return _CorePython.Camera_CameraUpdate(self)

    def CameraRenderer(self, shader):
        return _CorePython.Camera_CameraRenderer(self, shader)

    def CameraGetInput(self, xInput, yInput):
        return _CorePython.Camera_CameraGetInput(self, xInput, yInput)

    def GetTransform(self):
        return _CorePython.Camera_GetTransform(self)
    cam = property(_CorePython.Camera_cam_get, _CorePython.Camera_cam_set)

    def __init__(self):
        _CorePython.Camera_swiginit(self, _CorePython.new_Camera())
    __swig_destroy__ = _CorePython.delete_Camera
    eye = property(_CorePython.Camera_eye_get, _CorePython.Camera_eye_set)
    Front = property(_CorePython.Camera_Front_get, _CorePython.Camera_Front_set)
    Up = property(_CorePython.Camera_Up_get, _CorePython.Camera_Up_set)
    Right = property(_CorePython.Camera_Right_get, _CorePython.Camera_Right_set)
    pitch = property(_CorePython.Camera_pitch_get, _CorePython.Camera_pitch_set)
    yaw = property(_CorePython.Camera_yaw_get, _CorePython.Camera_yaw_set)
    cameraVelocity = property(_CorePython.Camera_cameraVelocity_get, _CorePython.Camera_cameraVelocity_set)
    mouseSentivity = property(_CorePython.Camera_mouseSentivity_get, _CorePython.Camera_mouseSentivity_set)
    LeftClick = property(_CorePython.Camera_LeftClick_get, _CorePython.Camera_LeftClick_set)
    mousePos = property(_CorePython.Camera_mousePos_get, _CorePython.Camera_mousePos_set)

    def GetVp(self):
        return _CorePython.Camera_GetVp(self)

# Register Camera in _CorePython:
_CorePython.Camera_swigregister(Camera)
CAMERASENSITIVITY = cvar.CAMERASENSITIVITY
YAW = cvar.YAW
PITCH = cvar.PITCH
SPEED = cvar.SPEED


